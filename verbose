{"displayTimeUnit":"ns","traceEvents":[{"pid":0,"ph":"M","name":"process_name","args":{"name":"clangd"}},{"pid":0,"ph":"M","name":"thread_name","tid":55670,"args":{"name":"clangd"}},{"pid":0,"ph":"i","name":"Log","ts":2192.759,"tid":55670,"args":{"Message":"Ubuntu clangd version 18.1.3 (1ubuntu1)"}},{"pid":0,"ph":"i","name":"Log","ts":2260.0320000000002,"tid":55670,"args":{"Message":"Features: linux+grpc"}},{"pid":0,"ph":"i","name":"Log","ts":2273.6889999999999,"tid":55670,"args":{"Message":"PID: 55670"}},{"pid":0,"ph":"i","name":"Log","ts":2496.761,"tid":55670,"args":{"Message":"Working directory: /home/prady/code/duckdb-snowflake"}},{"pid":0,"ph":"i","name":"Log","ts":2508.085,"tid":55670,"args":{"Message":"argv[0]: /usr/bin/clangd"}},{"pid":0,"ph":"i","name":"Log","ts":2513.4110000000001,"tid":55670,"args":{"Message":"argv[1]: --background-index"}},{"pid":0,"ph":"i","name":"Log","ts":2517.8200000000002,"tid":55670,"args":{"Message":"argv[2]: --completion-style=detailed"}},{"pid":0,"ph":"i","name":"Log","ts":2521.962,"tid":55670,"args":{"Message":"argv[3]: --fallback-style=Google"}},{"pid":0,"ph":"i","name":"Log","ts":2525.9479999999999,"tid":55670,"args":{"Message":"argv[4]: --header-insertion=iwyu"}},{"pid":0,"ph":"i","name":"Log","ts":2529.8510000000001,"tid":55670,"args":{"Message":"argv[5]: --suggest-missing-includes"}},{"pid":0,"ph":"i","name":"Log","ts":2554.8130000000001,"tid":55670,"args":{"Message":"argv[6]: --log=verbose"}},{"pid":0,"ph":"i","name":"Log","ts":2562.5,"tid":55670,"args":{"Message":"argv[7]: --compile-commands-dir=build/clangd"}},{"pid":0,"ph":"i","name":"Log","ts":3518.7080000000001,"tid":55670,"args":{"Message":"User config file is /home/prady/.config/clangd/config.yaml"}},{"pid":0,"ph":"i","name":"Log","ts":3576.6500000000001,"tid":55670,"args":{"Message":"Path specified by --compile-commands-dir does not exist. The argument will be ignored."}},{"pid":0,"ph":"i","name":"Log","ts":3600.5929999999998,"tid":55670,"args":{"Message":"Starting LSP over stdin/stdout"}},{"pid":0,"ph":"i","name":"Log","ts":5111.527,"tid":55670,"args":{"Message":"<<< {\"id\":0,\"jsonrpc\":\"2.0\",\"method\":\"initialize\",\"params\":{\"capabilities\":{\"general\":{\"markdown\":{\"parser\":\"marked\",\"version\":\"1.1.0\"},\"positionEncodings\":[\"utf-16\"],\"regularExpressions\":{\"engine\":\"ECMAScript\",\"version\":\"ES2020\"},\"staleRequestSupport\":{\"cancel\":true,\"retryOnContentModified\":[\"textDocument/semanticTokens/full\",\"textDocument/semanticTokens/range\",\"textDocument/semanticTokens/full/delta\"]}},\"notebookDocument\":{\"synchronization\":{\"dynamicRegistration\":true,\"executionSummarySupport\":true}},\"textDocument\":{\"callHierarchy\":{\"dynamicRegistration\":true},\"codeAction\":{\"codeActionLiteralSupport\":{\"codeActionKind\":{\"valueSet\":[\"\",\"quickfix\",\"refactor\",\"refactor.extract\",\"refactor.inline\",\"refactor.rewrite\",\"source\",\"source.organizeImports\"]}},\"dataSupport\":true,\"disabledSupport\":true,\"dynamicRegistration\":true,\"honorsChangeAnnotations\":true,\"isPreferredSupport\":true,\"resolveSupport\":{\"properties\":[\"edit\"]}},\"codeLens\":{\"dynamicRegistration\":true},\"colorProvider\":{\"dynamicRegistration\":true},\"completion\":{\"completionItem\":{\"commitCharactersSupport\":true,\"deprecatedSupport\":true,\"documentationFormat\":[\"markdown\",\"plaintext\"],\"insertReplaceSupport\":true,\"insertTextModeSupport\":{\"valueSet\":[1,2]},\"labelDetailsSupport\":true,\"preselectSupport\":true,\"resolveSupport\":{\"properties\":[\"documentation\",\"detail\",\"additionalTextEdits\"]},\"snippetSupport\":true,\"tagSupport\":{\"valueSet\":[1]}},\"completionItemKind\":{\"valueSet\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},\"completionList\":{\"itemDefaults\":[\"commitCharacters\",\"editRange\",\"insertTextFormat\",\"insertTextMode\",\"data\"]},\"contextSupport\":true,\"dynamicRegistration\":true,\"editsNearCursor\":true,\"insertTextMode\":2},\"declaration\":{\"dynamicRegistration\":true,\"linkSupport\":true},\"definition\":{\"dynamicRegistration\":true,\"linkSupport\":true},\"diagnostic\":{\"dynamicRegistration\":true,\"relatedDocumentSupport\":false},\"documentHighlight\":{\"dynamicRegistration\":true},\"documentLink\":{\"dynamicRegistration\":true,\"tooltipSupport\":true},\"documentSymbol\":{\"dynamicRegistration\":true,\"hierarchicalDocumentSymbolSupport\":true,\"labelSupport\":true,\"symbolKind\":{\"valueSet\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},\"tagSupport\":{\"valueSet\":[1]}},\"foldingRange\":{\"dynamicRegistration\":true,\"foldingRange\":{\"collapsedText\":false},\"foldingRangeKind\":{\"valueSet\":[\"comment\",\"imports\",\"region\"]},\"lineFoldingOnly\":true,\"rangeLimit\":5000},\"formatting\":{\"dynamicRegistration\":true},\"hover\":{\"contentFormat\":[\"markdown\",\"plaintext\"],\"dynamicRegistration\":true},\"implementation\":{\"dynamicRegistration\":true,\"linkSupport\":true},\"inactiveRegionsCapabilities\":{\"inactiveRegions\":true},\"inlayHint\":{\"dynamicRegistration\":true,\"resolveSupport\":{\"properties\":[\"tooltip\",\"textEdits\",\"label.tooltip\",\"label.location\",\"label.command\"]}},\"inlineValue\":{\"dynamicRegistration\":true},\"linkedEditingRange\":{\"dynamicRegistration\":true},\"onTypeFormatting\":{\"dynamicRegistration\":true},\"publishDiagnostics\":{\"codeDescriptionSupport\":true,\"dataSupport\":true,\"relatedInformation\":true,\"tagSupport\":{\"valueSet\":[1,2]},\"versionSupport\":false},\"rangeFormatting\":{\"dynamicRegistration\":true,\"rangesSupport\":true},\"references\":{\"dynamicRegistration\":true},\"rename\":{\"dynamicRegistration\":true,\"honorsChangeAnnotations\":true,\"prepareSupport\":true,\"prepareSupportDefaultBehavior\":1},\"selectionRange\":{\"dynamicRegistration\":true},\"semanticTokens\":{\"augmentsSyntaxTokens\":true,\"dynamicRegistration\":true,\"formats\":[\"relative\"],\"multilineTokenSupport\":false,\"overlappingTokenSupport\":false,\"requests\":{\"full\":{\"delta\":true},\"range\":true},\"serverCancelSupport\":true,\"tokenModifiers\":[\"declaration\",\"definition\",\"readonly\",\"static\",\"deprecated\",\"abstract\",\"async\",\"modification\",\"documentation\",\"defaultLibrary\"],\"tokenTypes\":[\"namespace\",\"type\",\"class\",\"enum\",\"interface\",\"struct\",\"typeParameter\",\"parameter\",\"variable\",\"property\",\"enumMember\",\"event\",\"function\",\"method\",\"macro\",\"keyword\",\"modifier\",\"comment\",\"string\",\"number\",\"regexp\",\"operator\",\"decorator\"]},\"signatureHelp\":{\"contextSupport\":true,\"dynamicRegistration\":true,\"signatureInformation\":{\"activeParameterSupport\":true,\"documentationFormat\":[\"markdown\",\"plaintext\"],\"parameterInformation\":{\"labelOffsetSupport\":true}}},\"synchronization\":{\"didSave\":true,\"dynamicRegistration\":true,\"willSave\":true,\"willSaveWaitUntil\":true},\"typeDefinition\":{\"dynamicRegistration\":true,\"linkSupport\":true},\"typeHierarchy\":{\"dynamicRegistration\":true}},\"window\":{\"showDocument\":{\"support\":true},\"showMessage\":{\"messageActionItem\":{\"additionalPropertiesSupport\":true}},\"workDoneProgress\":true},\"workspace\":{\"applyEdit\":true,\"codeLens\":{\"refreshSupport\":true},\"configuration\":true,\"diagnostics\":{\"refreshSupport\":true},\"didChangeConfiguration\":{\"dynamicRegistration\":true},\"didChangeWatchedFiles\":{\"dynamicRegistration\":true,\"relativePatternSupport\":true},\"executeCommand\":{\"dynamicRegistration\":true},\"fileOperations\":{\"didCreate\":true,\"didDelete\":true,\"didRename\":true,\"dynamicRegistration\":true,\"willCreate\":true,\"willDelete\":true,\"willRename\":true},\"foldingRange\":{\"refreshSupport\":true},\"inlayHint\":{\"refreshSupport\":true},\"inlineValue\":{\"refreshSupport\":true},\"semanticTokens\":{\"refreshSupport\":true},\"symbol\":{\"dynamicRegistration\":true,\"resolveSupport\":{\"properties\":[\"location.range\"]},\"symbolKind\":{\"valueSet\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},\"tagSupport\":{\"valueSet\":[1]}},\"workspaceEdit\":{\"changeAnnotationSupport\":{\"groupsOnLabel\":true},\"documentChanges\":true,\"failureHandling\":\"textOnlyTransactional\",\"normalizesLineEndings\":true,\"resourceOperations\":[\"create\",\"rename\",\"delete\"]},\"workspaceFolders\":true}},\"clientInfo\":{\"name\":\"Cursor\",\"version\":\"1.99.3\"},\"initializationOptions\":{\"clangdFileStatus\":true,\"fallbackFlags\":[\"-std=c++11\",\"-DDUCKDB\",\"-DDUCKDB_BUILD_LIBRARY\",\"-DDUCKDB_MAIN_LIBRARY\",\"-DDUCKDB_EXTENSION_QUACK_LINKED=1\"]},\"locale\":\"en\",\"processId\":31517,\"rootPath\":\"/home/prady/code/duckdb-snowflake\",\"rootUri\":\"file:///home/prady/code/duckdb-snowflake\",\"trace\":\"off\",\"workspaceFolders\":[{\"name\":\"duckdb-snowflake\",\"uri\":\"file:///home/prady/code/duckdb-snowflake\"}]}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":6120.1310000000003,"tid":55670,"args":{"Message":"<-- initialize(0)"}},{"pid":0,"ph":"i","name":"Log","ts":22022.957999999999,"tid":55670,"args":{"Message":"--> reply:initialize(0) 15 ms"}},{"pid":0,"ph":"i","name":"Log","ts":22119.933000000001,"tid":55670,"args":{"Message":">>> {\"id\":0,\"jsonrpc\":\"2.0\",\"result\":{\"capabilities\":{\"astProvider\":true,\"callHierarchyProvider\":true,\"clangdInlayHintsProvider\":true,\"codeActionProvider\":{\"codeActionKinds\":[\"quickfix\",\"refactor\",\"info\"]},\"compilationDatabase\":{\"automaticReload\":true},\"completionProvider\":{\"resolveProvider\":false,\"triggerCharacters\":[\".\",\"<\",\">\",\":\",\"\\\"\",\"/\",\"*\"]},\"declarationProvider\":true,\"definitionProvider\":true,\"documentFormattingProvider\":true,\"documentHighlightProvider\":true,\"documentLinkProvider\":{\"resolveProvider\":false},\"documentOnTypeFormattingProvider\":{\"firstTriggerCharacter\":\"\\n\",\"moreTriggerCharacter\":[]},\"documentRangeFormattingProvider\":true,\"documentSymbolProvider\":true,\"executeCommandProvider\":{\"commands\":[\"clangd.applyFix\",\"clangd.applyTweak\"]},\"foldingRangeProvider\":true,\"hoverProvider\":true,\"implementationProvider\":true,\"inactiveRegionsProvider\":true,\"inlayHintProvider\":true,\"memoryUsageProvider\":true,\"referencesProvider\":true,\"renameProvider\":{\"prepareProvider\":true},\"selectionRangeProvider\":true,\"semanticTokensProvider\":{\"full\":{\"delta\":true},\"legend\":{\"tokenModifiers\":[\"declaration\",\"definition\",\"deprecated\",\"deduced\",\"readonly\",\"static\",\"abstract\",\"virtual\",\"dependentName\",\"defaultLibrary\",\"usedAsMutableReference\",\"usedAsMutablePointer\",\"constructorOrDestructor\",\"userDefined\",\"functionScope\",\"classScope\",\"fileScope\",\"globalScope\"],\"tokenTypes\":[\"variable\",\"variable\",\"parameter\",\"function\",\"method\",\"function\",\"property\",\"variable\",\"class\",\"interface\",\"enum\",\"enumMember\",\"type\",\"type\",\"unknown\",\"namespace\",\"typeParameter\",\"concept\",\"type\",\"macro\",\"modifier\",\"operator\",\"bracket\",\"label\",\"comment\"]},\"range\":false},\"signatureHelpProvider\":{\"triggerCharacters\":[\"(\",\")\",\"{\",\"}\",\"<\",\">\",\",\"]},\"standardTypeHierarchyProvider\":true,\"textDocumentSync\":{\"change\":2,\"openClose\":true,\"save\":true},\"typeDefinitionProvider\":true,\"typeHierarchyProvider\":true,\"workspaceSymbolProvider\":true},\"serverInfo\":{\"name\":\"clangd\",\"version\":\"Ubuntu clangd version 18.1.3 (1ubuntu1) linux+grpc x86_64-pc-linux-gnu\"}}}\n"}},{"pid":0,"ph":"X","name":"initialize","ts":5930.1859999999997,"tid":55670,"dur":16271.641000000001,"args":{"Params":{"capabilities":{"general":{"markdown":{"parser":"marked","version":"1.1.0"},"positionEncodings":["utf-16"],"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]}},"notebookDocument":{"synchronization":{"dynamicRegistration":true,"executionSummarySupport":true}},"textDocument":{"callHierarchy":{"dynamicRegistration":true},"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dataSupport":true,"disabledSupport":true,"dynamicRegistration":true,"honorsChangeAnnotations":true,"isPreferredSupport":true,"resolveSupport":{"properties":["edit"]}},"codeLens":{"dynamicRegistration":true},"colorProvider":{"dynamicRegistration":true},"completion":{"completionItem":{"commitCharactersSupport":true,"deprecatedSupport":true,"documentationFormat":["markdown","plaintext"],"insertReplaceSupport":true,"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true,"preselectSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"snippetSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode","data"]},"contextSupport":true,"dynamicRegistration":true,"editsNearCursor":true,"insertTextMode":2},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false},"documentHighlight":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"documentSymbol":{"dynamicRegistration":true,"hierarchicalDocumentSymbolSupport":true,"labelSupport":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]}},"foldingRange":{"dynamicRegistration":true,"foldingRange":{"collapsedText":false},"foldingRangeKind":{"valueSet":["comment","imports","region"]},"lineFoldingOnly":true,"rangeLimit":5000},"formatting":{"dynamicRegistration":true},"hover":{"contentFormat":["markdown","plaintext"],"dynamicRegistration":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"inactiveRegionsCapabilities":{"inactiveRegions":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"inlineValue":{"dynamicRegistration":true},"linkedEditingRange":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"publishDiagnostics":{"codeDescriptionSupport":true,"dataSupport":true,"relatedInformation":true,"tagSupport":{"valueSet":[1,2]},"versionSupport":false},"rangeFormatting":{"dynamicRegistration":true,"rangesSupport":true},"references":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"honorsChangeAnnotations":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1},"selectionRange":{"dynamicRegistration":true},"semanticTokens":{"augmentsSyntaxTokens":true,"dynamicRegistration":true,"formats":["relative"],"multilineTokenSupport":false,"overlappingTokenSupport":false,"requests":{"full":{"delta":true},"range":true},"serverCancelSupport":true,"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"]},"signatureHelp":{"contextSupport":true,"dynamicRegistration":true,"signatureInformation":{"activeParameterSupport":true,"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}}},"synchronization":{"didSave":true,"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"typeHierarchy":{"dynamicRegistration":true}},"window":{"showDocument":{"support":true},"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"workDoneProgress":true},"workspace":{"applyEdit":true,"codeLens":{"refreshSupport":true},"configuration":true,"diagnostics":{"refreshSupport":true},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"executeCommand":{"dynamicRegistration":true},"fileOperations":{"didCreate":true,"didDelete":true,"didRename":true,"dynamicRegistration":true,"willCreate":true,"willDelete":true,"willRename":true},"foldingRange":{"refreshSupport":true},"inlayHint":{"refreshSupport":true},"inlineValue":{"refreshSupport":true},"semanticTokens":{"refreshSupport":true},"symbol":{"dynamicRegistration":true,"resolveSupport":{"properties":["location.range"]},"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]}},"workspaceEdit":{"changeAnnotationSupport":{"groupsOnLabel":true},"documentChanges":true,"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"resourceOperations":["create","rename","delete"]},"workspaceFolders":true}},"clientInfo":{"name":"Cursor","version":"1.99.3"},"initializationOptions":{"clangdFileStatus":true,"fallbackFlags":["-std=c++11","-DDUCKDB","-DDUCKDB_BUILD_LIBRARY","-DDUCKDB_MAIN_LIBRARY","-DDUCKDB_EXTENSION_QUACK_LINKED=1"]},"locale":"en","processId":31517,"rootPath":"/home/prady/code/duckdb-snowflake","rootUri":"file:///home/prady/code/duckdb-snowflake","trace":"off","workspaceFolders":[{"name":"duckdb-snowflake","uri":"file:///home/prady/code/duckdb-snowflake"}]},"Reply":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"clangdInlayHintsProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/","*"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"foldingRangeProvider":true,"hoverProvider":true,"implementationProvider":true,"inactiveRegionsProvider":true,"inlayHintProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":["declaration","definition","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","usedAsMutablePointer","constructorOrDestructor","userDefined","functionScope","classScope","fileScope","globalScope"],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","modifier","operator","bracket","label","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","<",">",","]},"standardTypeHierarchyProvider":true,"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeDefinitionProvider":true,"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"Ubuntu clangd version 18.1.3 (1ubuntu1) linux+grpc x86_64-pc-linux-gnu"}}}},{"pid":0,"ph":"i","name":"Log","ts":24807.244999999999,"tid":55670,"args":{"Message":"<<< {\"jsonrpc\":\"2.0\",\"method\":\"initialized\",\"params\":{}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":24823.352999999999,"tid":55670,"args":{"Message":"<-- initialized"}},{"pid":0,"ph":"X","name":"initialized","ts":24820.470000000001,"tid":55670,"dur":8.3659999999981665,"args":{"Params":{}}},{"pid":0,"ph":"i","name":"Log","ts":30212.717000000001,"tid":55670,"args":{"Message":"<<< {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/didOpen\",\"params\":{\"textDocument\":{\"languageId\":\"cpp\",\"text\":\"#include \\\"duckdb/main/extension_helper.hpp\\\"\\n\\n#include \\\"duckdb/common/file_system.hpp\\\"\\n#include \\\"duckdb/common/serializer/binary_deserializer.hpp\\\"\\n#include \\\"duckdb/common/serializer/buffered_file_reader.hpp\\\"\\n#include \\\"duckdb/common/string_util.hpp\\\"\\n#include \\\"duckdb/common/windows.hpp\\\"\\n#include \\\"duckdb/logging/logger.hpp\\\"\\n#include \\\"duckdb/main/client_context.hpp\\\"\\n#include \\\"duckdb/main/database.hpp\\\"\\n#include \\\"duckdb/main/extension.hpp\\\"\\n#include \\\"duckdb/main/extension_install_info.hpp\\\"\\n\\n// Note that c++ preprocessor doesn't have a nice way to clean this up so we need to set the defines we use to false\\n// explicitly when they are undefined\\n#ifndef DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED\\n#define DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_ICU_LINKED\\n#define DUCKDB_EXTENSION_ICU_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_EXCEL_LINKED\\n#define DUCKDB_EXTENSION_EXCEL_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_PARQUET_LINKED\\n#define DUCKDB_EXTENSION_PARQUET_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_TPCH_LINKED\\n#define DUCKDB_EXTENSION_TPCH_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_TPCDS_LINKED\\n#define DUCKDB_EXTENSION_TPCDS_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_HTTPFS_LINKED\\n#define DUCKDB_EXTENSION_HTTPFS_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_JSON_LINKED\\n#define DUCKDB_EXTENSION_JSON_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_JEMALLOC_LINKED\\n#define DUCKDB_EXTENSION_JEMALLOC_LINKED false\\n#endif\\n\\n#ifndef DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\\n#define DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED false\\n#endif\\n\\n// Load the generated header file containing our list of extension headers\\n#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS && !defined(DUCKDB_AMALGAMATION)\\n#include \\\"duckdb/main/extension/generated_extension_loader.hpp\\\"\\n#else\\n// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds, after that\\n//\\t\\t these can be removed\\n#if DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED\\n#include \\\"core_functions_extension.hpp\\\"\\n#endif\\n\\n#if DUCKDB_EXTENSION_ICU_LINKED\\n#include \\\"icu_extension.hpp\\\"\\n#endif\\n\\n#if DUCKDB_EXTENSION_PARQUET_LINKED\\n#include \\\"parquet_extension.hpp\\\"\\n#endif\\n\\n#if DUCKDB_EXTENSION_TPCH_LINKED\\n#include \\\"tpch_extension.hpp\\\"\\n#endif\\n\\n#if DUCKDB_EXTENSION_TPCDS_LINKED\\n#include \\\"tpcds_extension.hpp\\\"\\n#endif\\n\\n#if DUCKDB_EXTENSION_JSON_LINKED\\n#include \\\"json_extension.hpp\\\"\\n#endif\\n\\n#if DUCKDB_EXTENSION_JEMALLOC_LINKED\\n#include \\\"jemalloc_extension.hpp\\\"\\n#endif\\n\\n#if DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\\n#include \\\"autocomplete_extension.hpp\\\"\\n#endif\\n\\n#endif\\n\\nnamespace duckdb {\\n\\n//===--------------------------------------------------------------------===//\\n// Default Extensions\\n//===--------------------------------------------------------------------===//\\nstatic const DefaultExtension internal_extensions[] = {\\n    {\\\"core_functions\\\", \\\"Core function library\\\", DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED},\\n    {\\\"icu\\\", \\\"Adds support for time zones and collations using the ICU library\\\", DUCKDB_EXTENSION_ICU_LINKED},\\n    {\\\"excel\\\", \\\"Adds support for Excel-like format strings\\\", DUCKDB_EXTENSION_EXCEL_LINKED},\\n    {\\\"parquet\\\", \\\"Adds support for reading and writing parquet files\\\", DUCKDB_EXTENSION_PARQUET_LINKED},\\n    {\\\"tpch\\\", \\\"Adds TPC-H data generation and query support\\\", DUCKDB_EXTENSION_TPCH_LINKED},\\n    {\\\"tpcds\\\", \\\"Adds TPC-DS data generation and query support\\\", DUCKDB_EXTENSION_TPCDS_LINKED},\\n    {\\\"httpfs\\\", \\\"Adds support for reading and writing files over a HTTP(S) connection\\\", DUCKDB_EXTENSION_HTTPFS_LINKED},\\n    {\\\"json\\\", \\\"Adds support for JSON operations\\\", DUCKDB_EXTENSION_JSON_LINKED},\\n    {\\\"jemalloc\\\", \\\"Overwrites system allocator with JEMalloc\\\", DUCKDB_EXTENSION_JEMALLOC_LINKED},\\n    {\\\"autocomplete\\\", \\\"Adds support for autocomplete in the shell\\\", DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED},\\n    {\\\"motherduck\\\", \\\"Enables motherduck integration with the system\\\", false},\\n    {\\\"mysql_scanner\\\", \\\"Adds support for connecting to a MySQL database\\\", false},\\n    {\\\"sqlite_scanner\\\", \\\"Adds support for reading and writing SQLite database files\\\", false},\\n    {\\\"postgres_scanner\\\", \\\"Adds support for connecting to a Postgres database\\\", false},\\n    {\\\"inet\\\", \\\"Adds support for IP-related data types and functions\\\", false},\\n    {\\\"spatial\\\", \\\"Geospatial extension that adds support for working with spatial data and functions\\\", false},\\n    {\\\"aws\\\", \\\"Provides features that depend on the AWS SDK\\\", false},\\n    {\\\"azure\\\", \\\"Adds a filesystem abstraction for Azure blob storage to DuckDB\\\", false},\\n    {\\\"encodings\\\", \\\"All unicode encodings to UTF-8\\\", false},\\n    {\\\"iceberg\\\", \\\"Adds support for Apache Iceberg\\\", false},\\n    {\\\"vss\\\", \\\"Adds indexing support to accelerate Vector Similarity Search\\\", false},\\n    {\\\"delta\\\", \\\"Adds support for Delta Lake\\\", false},\\n    {\\\"fts\\\", \\\"Adds support for Full-Text Search Indexes\\\", false},\\n    {\\\"ui\\\", \\\"Adds local UI for DuckDB\\\", false},\\n    {\\\"ducklake\\\", \\\"Adds support for DuckLake, SQL as a Lakehouse Format\\\", false},\\n    {nullptr, nullptr, false}};\\n\\nidx_t ExtensionHelper::DefaultExtensionCount() {\\n\\tidx_t index;\\n\\tfor (index = 0; internal_extensions[index].name != nullptr; index++) {\\n\\t}\\n\\treturn index;\\n}\\n\\nDefaultExtension ExtensionHelper::GetDefaultExtension(idx_t index) {\\n\\tD_ASSERT(index < DefaultExtensionCount());\\n\\treturn internal_extensions[index];\\n}\\n\\n//===--------------------------------------------------------------------===//\\n// Allow Auto-Install Extensions\\n//===--------------------------------------------------------------------===//\\nstatic const char *const auto_install[] = {\\n    \\\"motherduck\\\", \\\"postgres_scanner\\\", \\\"mysql_scanner\\\", \\\"sqlite_scanner\\\", \\\"delta\\\", \\\"iceberg\\\", \\\"uc_catalog\\\",\\n    \\\"ui\\\",         \\\"ducklake\\\",         nullptr};\\n\\n// TODO: unify with new autoload mechanism\\nbool ExtensionHelper::AllowAutoInstall(const string &extension) {\\n\\tauto extension_name = ApplyExtensionAlias(extension);\\n\\tfor (idx_t i = 0; auto_install[i]; i++) {\\n\\t\\tif (extension_name == auto_install[i]) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nbool ExtensionHelper::CanAutoloadExtension(const string &ext_name) {\\n#ifdef DUCKDB_DISABLE_EXTENSION_LOAD\\n\\treturn false;\\n#endif\\n\\n\\tif (ext_name.empty()) {\\n\\t\\treturn false;\\n\\t}\\n\\tfor (const auto &ext : AUTOLOADABLE_EXTENSIONS) {\\n\\t\\tif (ext_name == ext) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\nstring ExtensionHelper::AddExtensionInstallHintToErrorMsg(ClientContext &context, const string &base_error,\\n                                                          const string &extension_name) {\\n\\n\\treturn AddExtensionInstallHintToErrorMsg(DatabaseInstance::GetDatabase(context), base_error, extension_name);\\n}\\nstring ExtensionHelper::AddExtensionInstallHintToErrorMsg(DatabaseInstance &db, const string &base_error,\\n                                                          const string &extension_name) {\\n\\tstring install_hint;\\n\\n\\tauto &config = db.config;\\n\\n\\tif (!ExtensionHelper::CanAutoloadExtension(extension_name)) {\\n\\t\\tinstall_hint = \\\"Please try installing and loading the \\\" + extension_name + \\\" extension:\\\\nINSTALL \\\" +\\n\\t\\t               extension_name + \\\";\\\\nLOAD \\\" + extension_name + \\\";\\\\n\\\\n\\\";\\n\\t} else if (!config.options.autoload_known_extensions) {\\n\\t\\tinstall_hint =\\n\\t\\t    \\\"Please try installing and loading the \\\" + extension_name + \\\" extension by running:\\\\nINSTALL \\\" +\\n\\t\\t    extension_name + \\\";\\\\nLOAD \\\" + extension_name +\\n\\t\\t    \\\";\\\\n\\\\nAlternatively, consider enabling auto-install \\\"\\n\\t\\t    \\\"and auto-load by running:\\\\nSET autoinstall_known_extensions=1;\\\\nSET autoload_known_extensions=1;\\\";\\n\\t} else if (!config.options.autoinstall_known_extensions) {\\n\\t\\tinstall_hint =\\n\\t\\t    \\\"Please try installing the \\\" + extension_name + \\\" extension by running:\\\\nINSTALL \\\" + extension_name +\\n\\t\\t    \\\";\\\\n\\\\nAlternatively, consider enabling autoinstall by running:\\\\nSET autoinstall_known_extensions=1;\\\";\\n\\t}\\n\\n\\tif (!install_hint.empty()) {\\n\\t\\treturn base_error + \\\"\\\\n\\\\n\\\" + install_hint;\\n\\t}\\n\\n\\treturn base_error;\\n}\\n\\nbool ExtensionHelper::TryAutoLoadExtension(ClientContext &context, const string &extension_name) noexcept {\\n\\tif (context.db->ExtensionIsLoaded(extension_name)) {\\n\\t\\treturn true;\\n\\t}\\n\\tauto &dbconfig = DBConfig::GetConfig(context);\\n\\ttry {\\n\\t\\tif (dbconfig.options.autoinstall_known_extensions) {\\n\\t\\t\\tauto &config = DBConfig::GetConfig(context);\\n\\t\\t\\tauto autoinstall_repo = ExtensionRepository::GetRepositoryByUrl(\\n\\t\\t\\t    StringValue::Get(config.GetSetting<AutoinstallExtensionRepositorySetting>(context)));\\n\\t\\t\\tExtensionInstallOptions options;\\n\\t\\t\\toptions.repository = autoinstall_repo;\\n\\t\\t\\tExtensionHelper::InstallExtension(context, extension_name, options);\\n\\t\\t}\\n\\t\\tExtensionHelper::LoadExternalExtension(context, extension_name);\\n\\t\\treturn true;\\n\\t} catch (...) {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nstatic string GetAutoInstallExtensionsRepository(const DBConfigOptions &options) {\\n\\tstring repository_url = options.autoinstall_extension_repo;\\n\\tif (repository_url.empty()) {\\n\\t\\trepository_url = options.custom_extension_repo;\\n\\t}\\n\\treturn repository_url;\\n}\\n\\nbool ExtensionHelper::TryAutoLoadExtension(DatabaseInstance &instance, const string &extension_name) noexcept {\\n\\tif (instance.ExtensionIsLoaded(extension_name)) {\\n\\t\\treturn true;\\n\\t}\\n\\tauto &dbconfig = DBConfig::GetConfig(instance);\\n\\ttry {\\n\\t\\tauto &fs = FileSystem::GetFileSystem(instance);\\n\\t\\tif (dbconfig.options.autoinstall_known_extensions) {\\n\\t\\t\\tauto repository_url = GetAutoInstallExtensionsRepository(dbconfig.options);\\n\\t\\t\\tauto autoinstall_repo = ExtensionRepository::GetRepositoryByUrl(repository_url);\\n\\t\\t\\tExtensionInstallOptions options;\\n\\t\\t\\toptions.repository = autoinstall_repo;\\n\\t\\t\\tExtensionHelper::InstallExtension(instance, fs, extension_name, options);\\n\\t\\t}\\n\\t\\tExtensionHelper::LoadExternalExtension(instance, fs, extension_name);\\n\\t\\treturn true;\\n\\t} catch (...) {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nstatic ExtensionUpdateResult UpdateExtensionInternal(ClientContext &context, DatabaseInstance &db, FileSystem &fs,\\n                                                     const string &full_extension_path, const string &extension_name) {\\n\\tExtensionUpdateResult result;\\n\\tresult.extension_name = extension_name;\\n\\n\\tauto &config = DBConfig::GetConfig(db);\\n\\n\\tif (!fs.FileExists(full_extension_path)) {\\n\\t\\tresult.tag = ExtensionUpdateResultTag::NOT_INSTALLED;\\n\\t\\treturn result;\\n\\t}\\n\\n\\t// Extension exists, check for .info file\\n\\tconst string info_file_path = full_extension_path + \\\".info\\\";\\n\\tif (!fs.FileExists(info_file_path)) {\\n\\t\\tresult.tag = ExtensionUpdateResultTag::MISSING_INSTALL_INFO;\\n\\t\\treturn result;\\n\\t}\\n\\n\\t// Parse the version of the extension before updating\\n\\tauto ext_binary_handle = fs.OpenFile(full_extension_path, FileOpenFlags::FILE_FLAGS_READ);\\n\\tauto parsed_metadata = ExtensionHelper::ParseExtensionMetaData(*ext_binary_handle);\\n\\tif (!parsed_metadata.AppearsValid() && !config.options.allow_extensions_metadata_mismatch) {\\n\\t\\tthrow IOException(\\n\\t\\t    \\\"Failed to update extension: '%s', the metadata of the extension appears invalid! To resolve this, either \\\"\\n\\t\\t    \\\"reinstall the extension using 'FORCE INSTALL %s', manually remove the file '%s', or enable '\\\"\\n\\t\\t    \\\"SET allow_extensions_metadata_mismatch=true'\\\",\\n\\t\\t    extension_name, extension_name, full_extension_path);\\n\\t}\\n\\n\\tresult.prev_version = parsed_metadata.AppearsValid() ? parsed_metadata.extension_version : \\\"\\\";\\n\\n\\tauto extension_install_info = ExtensionInstallInfo::TryReadInfoFile(fs, info_file_path, extension_name);\\n\\n\\t// Early out: no info file found\\n\\tif (extension_install_info->mode == ExtensionInstallMode::UNKNOWN) {\\n\\t\\tresult.tag = ExtensionUpdateResultTag::MISSING_INSTALL_INFO;\\n\\t\\treturn result;\\n\\t}\\n\\n\\t// Early out: we can only update extensions from repositories\\n\\tif (extension_install_info->mode != ExtensionInstallMode::REPOSITORY) {\\n\\t\\tresult.tag = ExtensionUpdateResultTag::NOT_A_REPOSITORY;\\n\\t\\tresult.installed_version = result.prev_version;\\n\\t\\treturn result;\\n\\t}\\n\\n\\tauto repository_from_info = ExtensionRepository::GetRepositoryByUrl(extension_install_info->repository_url);\\n\\tresult.repository = repository_from_info.ToReadableString();\\n\\n\\t// Force install the full url found in this file, enabling etags to ensure efficient updating\\n\\tExtensionInstallOptions options;\\n\\toptions.repository = repository_from_info;\\n\\toptions.force_install = true;\\n\\toptions.use_etags = true;\\n\\n\\tunique_ptr<ExtensionInstallInfo> install_result;\\n\\ttry {\\n\\t\\tinstall_result = ExtensionHelper::InstallExtension(context, extension_name, options);\\n\\t} catch (std::exception &e) {\\n\\t\\tErrorData error(e);\\n\\t\\terror.Throw(\\\"Extension updating failed when trying to install '\\\" + extension_name + \\\"', original error: \\\");\\n\\t}\\n\\n\\tresult.installed_version = install_result->version;\\n\\n\\tif (result.installed_version.empty()) {\\n\\t\\tresult.tag = ExtensionUpdateResultTag::REDOWNLOADED;\\n\\t} else if (result.installed_version != result.prev_version) {\\n\\t\\tresult.tag = ExtensionUpdateResultTag::UPDATED;\\n\\t} else {\\n\\t\\tresult.tag = ExtensionUpdateResultTag::NO_UPDATE_AVAILABLE;\\n\\t}\\n\\n\\treturn result;\\n}\\n\\nvector<ExtensionUpdateResult> ExtensionHelper::UpdateExtensions(ClientContext &context) {\\n\\tauto &fs = FileSystem::GetFileSystem(context);\\n\\n\\tvector<ExtensionUpdateResult> result;\\n\\tDatabaseInstance &db = DatabaseInstance::GetDatabase(context);\\n\\n#ifndef WASM_LOADABLE_EXTENSIONS\\n\\tcase_insensitive_set_t seen_extensions;\\n\\n\\t// scan the install directory for installed extensions\\n\\tauto ext_directory = ExtensionHelper::ExtensionDirectory(db, fs);\\n\\tfs.ListFiles(ext_directory, [&](const string &path, bool is_directory) {\\n\\t\\tif (!StringUtil::EndsWith(path, \\\".duckdb_extension\\\")) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tauto extension_file_name = StringUtil::GetFileName(path);\\n\\t\\tauto extension_name = StringUtil::Split(extension_file_name, \\\".\\\")[0];\\n\\n\\t\\tseen_extensions.insert(extension_name);\\n\\n\\t\\tresult.push_back(UpdateExtensionInternal(context, db, fs, fs.JoinPath(ext_directory, path), extension_name));\\n\\t});\\n#endif\\n\\n\\treturn result;\\n}\\n\\nExtensionUpdateResult ExtensionHelper::UpdateExtension(ClientContext &context, const string &extension_name) {\\n\\tauto &fs = FileSystem::GetFileSystem(context);\\n\\tDatabaseInstance &db = DatabaseInstance::GetDatabase(context);\\n\\tauto ext_directory = ExtensionHelper::ExtensionDirectory(db, fs);\\n\\n\\tauto full_extension_path = fs.JoinPath(ext_directory, extension_name + \\\".duckdb_extension\\\");\\n\\n\\tauto update_result = UpdateExtensionInternal(context, db, fs, full_extension_path, extension_name);\\n\\n\\tif (update_result.tag == ExtensionUpdateResultTag::NOT_INSTALLED) {\\n\\t\\tthrow InvalidInputException(\\\"Failed to update the extension '%s', the extension is not installed!\\\",\\n\\t\\t                            extension_name);\\n\\t} else if (update_result.tag == ExtensionUpdateResultTag::UNKNOWN) {\\n\\t\\tthrow InternalException(\\\"Failed to update extension '%s', an unknown error occurred\\\", extension_name);\\n\\t}\\n\\treturn update_result;\\n}\\n\\nvoid ExtensionHelper::AutoLoadExtension(ClientContext &context, const string &extension_name) {\\n\\treturn ExtensionHelper::AutoLoadExtension(*context.db, extension_name);\\n}\\n\\nvoid ExtensionHelper::AutoLoadExtension(DatabaseInstance &db, const string &extension_name) {\\n\\tif (db.ExtensionIsLoaded(extension_name)) {\\n\\t\\t// Avoid downloading again\\n\\t\\treturn;\\n\\t}\\n\\tauto &dbconfig = DBConfig::GetConfig(db);\\n\\ttry {\\n\\t\\tauto fs = FileSystem::CreateLocal();\\n#ifndef DUCKDB_WASM\\n\\t\\tif (dbconfig.options.autoinstall_known_extensions) {\\n\\t\\t\\tauto repository_url = GetAutoInstallExtensionsRepository(dbconfig.options);\\n\\t\\t\\tauto autoinstall_repo = ExtensionRepository::GetRepositoryByUrl(repository_url);\\n\\t\\t\\tExtensionInstallOptions options;\\n\\t\\t\\toptions.repository = autoinstall_repo;\\n\\t\\t\\tExtensionHelper::InstallExtension(db, *fs, extension_name, options);\\n\\t\\t}\\n#endif\\n\\t\\tExtensionHelper::LoadExternalExtension(db, *fs, extension_name);\\n\\t\\tDUCKDB_LOG_INFO(db, \\\"Loaded extension '%s'\\\", extension_name);\\n\\t} catch (std::exception &e) {\\n\\t\\tErrorData error(e);\\n\\t\\tthrow AutoloadException(extension_name, error.RawMessage());\\n\\t}\\n}\\n\\n//===--------------------------------------------------------------------===//\\n// Load Statically Compiled Extension\\n//===--------------------------------------------------------------------===//\\nvoid ExtensionHelper::LoadAllExtensions(DuckDB &db) {\\n\\t// The in-tree extensions that we check. Non-cmake builds are currently limited to these for static linking\\n\\t// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds, after that\\n\\t//\\t\\t these can be removed\\n\\tvector<string> extensions {\\\"parquet\\\", \\\"icu\\\",  \\\"tpch\\\",     \\\"tpcds\\\",        \\\"httpfs\\\",        \\\"json\\\",\\n\\t                           \\\"excel\\\",   \\\"inet\\\", \\\"jemalloc\\\", \\\"autocomplete\\\", \\\"core_functions\\\"};\\n\\tfor (auto &ext : extensions) {\\n\\t\\tLoadExtensionInternal(db, ext, true);\\n\\t}\\n\\n#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS\\n\\tfor (const auto &ext : LinkedExtensions()) {\\n\\t\\tLoadExtensionInternal(db, ext, true);\\n\\t}\\n#endif\\n}\\n\\nExtensionLoadResult ExtensionHelper::LoadExtension(DuckDB &db, const std::string &extension) {\\n\\treturn LoadExtensionInternal(db, extension, false);\\n}\\n\\nExtensionLoadResult ExtensionHelper::LoadExtensionInternal(DuckDB &db, const std::string &extension,\\n                                                           bool initial_load) {\\n#ifdef DUCKDB_TEST_REMOTE_INSTALL\\n\\tif (!initial_load && StringUtil::Contains(DUCKDB_TEST_REMOTE_INSTALL, extension)) {\\n\\t\\tConnection con(db);\\n\\t\\tauto result = con.Query(\\\"INSTALL \\\" + extension);\\n\\t\\tif (result->HasError()) {\\n\\t\\t\\tresult->Print();\\n\\t\\t\\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\\n\\t\\t}\\n\\t\\tresult = con.Query(\\\"LOAD \\\" + extension);\\n\\t\\tif (result->HasError()) {\\n\\t\\t\\tresult->Print();\\n\\t\\t\\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\\n\\t\\t}\\n\\t\\treturn ExtensionLoadResult::LOADED_EXTENSION;\\n\\t}\\n#endif\\n\\n#ifdef DUCKDB_EXTENSIONS_TEST_WITH_LOADABLE\\n\\t// Note: weird comma's are on purpose to do easy string contains on a list of extension names\\n\\tif (!initial_load && StringUtil::Contains(DUCKDB_EXTENSIONS_TEST_WITH_LOADABLE, \\\",\\\" + extension + \\\",\\\")) {\\n\\t\\tConnection con(db);\\n\\t\\tauto result = con.Query((string) \\\"LOAD '\\\" + DUCKDB_EXTENSIONS_BUILD_PATH + \\\"/\\\" + extension + \\\"/\\\" + extension +\\n\\t\\t                        \\\".duckdb_extension'\\\");\\n\\t\\tif (result->HasError()) {\\n\\t\\t\\tresult->Print();\\n\\t\\t\\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\\n\\t\\t}\\n\\t\\treturn ExtensionLoadResult::LOADED_EXTENSION;\\n\\t}\\n#endif\\n\\n\\t// This is the main extension loading mechanism that loads the extension that are statically linked.\\n#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS\\n\\tif (TryLoadLinkedExtension(db, extension)) {\\n\\t\\treturn ExtensionLoadResult::LOADED_EXTENSION;\\n\\t} else {\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n\\t}\\n#endif\\n\\n\\t// This is the fallback to the \\\"old\\\" extension loading mechanism for non-cmake builds\\n\\t// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds\\n\\tif (extension == \\\"parquet\\\") {\\n#if DUCKDB_EXTENSION_PARQUET_LINKED\\n\\t\\tdb.LoadStaticExtension<ParquetExtension>();\\n#else\\n\\t\\t// parquet extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"icu\\\") {\\n#if DUCKDB_EXTENSION_ICU_LINKED\\n\\t\\tdb.LoadStaticExtension<IcuExtension>();\\n#else\\n\\t\\t// icu extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"tpch\\\") {\\n#if DUCKDB_EXTENSION_TPCH_LINKED\\n\\t\\tdb.LoadStaticExtension<TpchExtension>();\\n#else\\n\\t\\t// icu extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"tpcds\\\") {\\n#if DUCKDB_EXTENSION_TPCDS_LINKED\\n\\t\\tdb.LoadStaticExtension<TpcdsExtension>();\\n#else\\n\\t\\t// icu extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"httpfs\\\") {\\n#if DUCKDB_EXTENSION_HTTPFS_LINKED\\n\\t\\tdb.LoadStaticExtension<HttpfsExtension>();\\n#else\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"json\\\") {\\n#if DUCKDB_EXTENSION_JSON_LINKED\\n\\t\\tdb.LoadStaticExtension<JsonExtension>();\\n#else\\n\\t\\t// json extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"excel\\\") {\\n#if DUCKDB_EXTENSION_EXCEL_LINKED\\n\\t\\tdb.LoadStaticExtension<ExcelExtension>();\\n#else\\n\\t\\t// excel extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"jemalloc\\\") {\\n#if DUCKDB_EXTENSION_JEMALLOC_LINKED\\n\\t\\tdb.LoadStaticExtension<JemallocExtension>();\\n#else\\n\\t\\t// jemalloc extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"autocomplete\\\") {\\n#if DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\\n\\t\\tdb.LoadStaticExtension<AutocompleteExtension>();\\n#else\\n\\t\\t// autocomplete extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"inet\\\") {\\n#if DUCKDB_EXTENSION_INET_LINKED\\n\\t\\tdb.LoadStaticExtension<InetExtension>();\\n#else\\n\\t\\t// inet extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t} else if (extension == \\\"core_functions\\\") {\\n#if DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED\\n\\t\\tdb.LoadStaticExtension<CoreFunctionsExtension>();\\n#else\\n\\t\\t// core_functions extension required but not build: skip this test\\n\\t\\treturn ExtensionLoadResult::NOT_LOADED;\\n#endif\\n\\t}\\n\\n\\treturn ExtensionLoadResult::LOADED_EXTENSION;\\n}\\n\\nstatic const char *const public_keys[] = {\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6aZuHUa1cLR9YDDYaEfi\\nUDbWY8m2t7b71S+k1ZkXfHqu+5drAxm+dIDzdOHOKZSIdwnJbT3sSqwFoG6PlXF3\\ng3dsJjax5qESIhbVvf98nyipwNINxoyHCkcCIPkX17QP2xpnT7V59+CqcfDJXLqB\\nymjqoFSlaH8dUCHybM4OXlWnAtVHW/nmw0khF8CetcWn4LxaTUHptByaBz8CasSs\\ngWpXgSfaHc3R9eArsYhtsVFGyL/DEWgkEHWolxY3Llenhgm/zOf3s7PsAMe7EJX4\\nqlSgiXE6OVBXnqd85z4k20lCw/LAOe5hoTMmRWXIj74MudWe2U91J6GrrGEZa7zT\\n7QIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq8Gg1S/LI6ApMAYsFc9m\\nPrkFIY+nc0LXSpxm77twU8D5M0Xkz/Av4f88DQmj1OE3164bEtR7sl7xDPZojFHj\\nYYyucJxEI97l5OU1d3Pc1BdKXL4+mnW5FlUGj218u8qD+G1hrkySXQkrUzIjPPNw\\no6knF3G/xqQF+KI+tc7ajnTni8CAlnUSxfnstycqbVS86m238PLASVPK9/SmIRgO\\nXCEV+ZNMlerq8EwsW4cJPHH0oNVMcaG+QT4z79roW1rbJghn9ubAVdQU6VLUAikI\\nb8keUyY+D0XdY9DpDBeiorb1qPYt8BPLOAQrIUAw1CgpMM9KFp9TNvW47KcG4bcB\\ndQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyYATA9KOQ0Azf97QAPfY\\nJc/WeZyE4E1qlRgKWKqNtYSXZqk5At0V7w2ntAWtYSpczFrVepCJ0oPMDpZTigEr\\nNgOgfo5LEhPx5XmtCf62xY/xL3kgtfz9Mm5TBkuQy4KwY4z1npGr4NYYDXtF7kkf\\nLQE+FnD8Yr4E0wHBib7ey7aeeKWmwqvUjzDqG+TzaqwzO/RCUsSctqSS0t1oo2hv\\n4q1ofanUXsV8MXk/ujtgxu7WkVvfiSpK1zRazgeZjcrQFO9qL/pla0vBUxa1U8He\\nGMLnL0oRfcMg7yKrbIMrvlEl2ZmiR9im44dXJWfY42quObwr1PuEkEoCMcMisSWl\\njwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4RvbWx3zLblDHH/lGUF5\\nQ512MT+v3YPriuibROMllv8WiCLAMeJ0QXbVaIzBOeHDeLx8yvoZZN+TENKxtT6u\\nIfMMneUzxHBqy0AQNfIsSsOnG5nqoeE/AwbS6VqCdH1aLfoCoPffacHYa0XvTcsi\\naVlZfr+UzJS+ty8pRmFVi1UKSOADDdK8XfIovJl/zMP2TxYX2Y3fnjeLtl8Sqs2e\\nP+eHDoy7Wi4EPTyY7tNTCfxwKNHn1HQ5yrv5dgvMxFWIWXGz24yikFvtwLGHe8uJ\\nWi+fBX+0PF0diZ6pIthZ149VU8qCqYAXjgpxZ0EZdrsiF6Ewz0cfg20SYApFcmW4\\npwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyhd5AfwrUohG3O4DE0K9\\nO3FmgB7zE4aDnkL8UUfGCh5kdP8q7ewMjekY+c6LwWOmpdJpSwqhfV1q5ZU1l6rk\\n3hlt03LO3sgs28kcfOVH15hqfxts6Sg5KcRjxStE50ORmXGwXDcS9vqkJ60J1EHA\\nlcZqbCRSO73ZPLhdepfd0/C6tM0L7Ge6cAE62/MTmYNGv8fDzwQr/kYIJMdoS8Zp\\nthRpctFZJtPs3b0fffZA/TCLVKMvEVgTWs48751qKid7N/Lm/iEGx/tOf4o23Nec\\nPz1IQaGLP+UOLVQbqQBHJWNOqigm7kWhDgs3N4YagWgxPEQ0WVLtFji/ZjlKZc7h\\ndwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnFDg3LhyV6BVE2Z3zQvN\\n6urrKvPhygTa5+wIPGwYTzJ8DfGALqlsX3VOXMvcJTca6SbuwwkoXHuSU5wQxfcs\\nbt4jTXD3NIoRwQPl+D9IbgIMuX0ACl27rJmr/f9zkY7qui4k1X82pQkxBe+/qJ4r\\nTBwVNONVx1fekTMnSCEhwg5yU3TNbkObu0qlQeJfuMWLDQbW/8v/qfr/Nz0JqHDN\\nyYKfKvFMlORxyJYiOyeOsbzNGEhkGQGOmKhRUhS35kD+oA0jqwPwMCM9O4kFg/L8\\niZbpBBX2By1K3msejWMRAewTOyPas6YMQOYq9BMmWQqzVtG5xcaSJwN/YnMpJyqb\\nsQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1z0RU8vGrfEkrscEoZKA\\nGiOcGh2EMcKwjQpl4nKuR9H4o/dg+CZregVSHg7MP2f8mhLZZyoFev49oWOV4Rmi\\nqs99UNxm7DyKW1fF1ovowsUW5lsDoKYLvpuzHo0s4laiV4AnIYP7tHGLdzsnK2Os\\nCp5dSuMwKHPZ9N25hXxFB/dRrAdIiXHvbSqr4N29XzfQloQpL3bGHLKY6guFHluH\\nX5dJ9eirVakWWou7BR2rnD0k9vER6oRdVnJ6YKb5uhWEOQ3NmV961oyr+uiDTcep\\nqqtGHWuFhENixtiWGjFJJcACwqxEAW3bz9lyrfnPDsHSW/rlQVDIAkik+fOp+R7L\\nkQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxwO27e1vnbNcpiDg7Wwx\\nK/w5aEGukXotu3529ieq+O39H0+Bak4vIbzGhDUh3/ElmxaFMAs4PYrWe/hc2WFD\\nH4JCOoFIn4y9gQeE855DGGFgeIVd1BnSs5S+5wUEMxLNyHdHSmINN6FsoZ535iUg\\nKdYjRh1iZevezg7ln8o/O36uthu925ehFBXSy6jLJgQlwmq0KxZJE0OAZhuDBM60\\nMtIunNa/e5y+Gw3GknFwtRLmn/nEckZx1nEtepYvvUa7UGy+8KuGuhOerCZTutbG\\nk8liCVgGenRve8unA2LrBbpL+AUf3CrZU/uAxxTqWmw6Z/S6TeW5ozeeyOCh8ii6\\nTwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsGIFOfIQ4RI5qu4klOxf\\nge6eXwBMAkuTXyhyIIJDtE8CurnwQvUXVlt+Kf0SfuIFW6MY5ErcWE/vMFbc81IR\\n9wByOAAV2CTyiLGZT63uE8pN6FSHd6yGYCLjXd3P3cnP3Qj5pBncpLuAUDfHG4wP\\nbs9jIADw3HysD+eCNja8p7ZC7CzWxTcO7HsEu9deAAU19YywdpagXvQ0pJ9zV5qU\\njrHxBygl31t6TmmX+3d+azjGu9Hu36E+5wcSOOhuwAFXDejb40Ixv53ItJ3fZzzH\\nPF2nj9sQvQ8c5ptjyOvQCBRdqkEWXIVHClxqWb+o59pDIh1G0UGcmiDN7K9Gz5HA\\nZQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt9uUnlW/CoUXT68yaZh9\\nSeXHzGRCPNEI98Tara+dgYxDX1z7nfOh8o15liT0QsAzx34EewZOxcKCNiV/dZX5\\nz4clCkD8uUbZut6IVx8Eu+7Qcd5jZthRc6hQrN9Ltv7ZQEh7KGXOHa53kT2K01ws\\n4jbVmd/7Nx7y0Yyqhja01pIu/CUaTkODfQxBXwriLdIzp7y/iJeF/TLqCwZWHKQx\\nQOZnsPEveB1F00Va9MeAtTlXFUJ/TQXquqTjeLj4HuIRtbyuNgWoc0JyF+mcafAl\\nbnrNEBIfxZhAT81aUCIAzRJp6AqfdeZxnZ/WwohtZQZLXAxFQPTWCcP+Z9M7OIQL\\nWwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA56NhfACkeCyZM07l2wmd\\niTp24E2tLLKU3iByKlIRWRAvXsOejRMJTHTNHWa3cQ7uLP++Tf2St7ksNsyPMNZy\\n9QRTLNCYr9rN9loLwdb2sMWxFBwwzCaAOTahGI7GJQy30UB7FEND0X/5U2rZvQij\\nQ6K+O4aa+K9M5qyOHNMmXywmTnAgWKNaNxQHPRtD2+dSj60T6zXdtIuCrPfcNGg5\\ngj07qWGEXX83V/L7nSqCiIVYg/wqds1x52Yjk1nhXYNBTqlnhmOd8LynGxz/sXC7\\nh2Q9XsHjXIChW4FHyLIOl6b4zPMBSxzCigYm3QZJWfAkZv5PBRtnq7vhYOLHzLQj\\nCwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmfPLe0IWGYC0MZC6YiM3\\nQGfhT6zSKB0I2DW44nlBlWUcF+32jW2bFJtgE76qGGKFeU4kJBWYr99ufHoAodNg\\nM1Ehl/JfQ5KmbC1WIqnFTrgbmqJde79jeCvCpbFLuqnzidwO1PbXDbfRFQcgWaXT\\nmDVLNNVmLxA0GkCv+kydE2gtcOD9BDceg7F/56TDvclyI5QqAnjE2XIRMPZlXQP4\\noF2kgz4Cn7LxLHYmkU2sS9NYLzHoyUqFplWlxkQjA4eQ0neutV1Ydmc1IX8W7R38\\nA7nFtaT8iI8w6Vkv7ijYN6xf5cVBPKZ3Dv7AdwPet86JD5mf5v+r7iwg5xl3r77Z\\niwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoB1kWsX8YmCcFOD9ilBY\\nxK076HmUAN026uJ8JpmU9Hz+QT1FNXOsnj1h2G6U6btYVIdHUTHy/BvAumrDKqRz\\nqcEAzCuhxUjPjss54a/Zqu6nQcoIPHuG/Er39oZHIVkPR1WCvWj8wmyYv6T//dPH\\nunO6tW29sXXxS+J1Gah6vpbtJw1pI/liah1DZzb13KWPDI6ZzviTNnW4S05r6js/\\n30He+Yud6aywrdaP/7G90qcrteEFcjFy4Xf+5vG960oKoGoDplwX5poay1oCP9tb\\ng8AC8VSRAGi3oviTeSWZcrLXS8AtJhGvF48cXQj2q+8YeVKVDpH6fPQxJ9Sh9aeU\\nawIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4NTMAIYIlCMID00ufy/I\\nAZXc8pocDx9N1Q5x5/cL3aIpLmx02AKo9BvTJaJuHiTjlwYhPtlhIrHV4HUVTkOX\\nsISp8B8v9i2I1RIvCTAcvy3gcH6rdRWZ0cdTUiMEqnnxBX9zdzl8oMzZcyauv19D\\nBeqJvzflIT96b8g8K3mvgJHs9a1j9f0gN8FuTA0c52DouKnrh8UwH7mlrumYerJw\\n6goJGQuK1HEOt6bcQuvogkbgJWOoEYwjNrPwQvIcP4wyrgSnOHg1yXOFE84oVynJ\\nczQEOz9ke42I3h8wrnQxilEYBVo2uX8MenqTyfGnE32lPRt3Wv1iEVQls8Cxiuy2\\nCQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3bUtfp66OtRyvIF/oucn\\nid8mo7gvbNEH04QMLO3Ok43dlWgWI3hekJAqOYc0mvoI5anqr98h8FI7aCYZm/bY\\nvpz0I1aXBaEPh3aWh8f/w9HME7ykBvmhMe3J+VFGWWL4eswfRl//GCtnSMBzDFhM\\nSaQOTvADWHkC0njeI5yXjf/lNm6fMACP1cnhuvCtnx7VP/DAtvUk9usDKG56MJnZ\\nUoVM3HHjbJeRwxCdlSWe12ilCdwMRKSDY92Hk38/zBLenH04C3HRQLjBGewACUmx\\nuvNInehZ4kSYFGa+7UxBxFtzJhlKzGR73qUjpWzZivCe1K0WfRVP5IWsKNCCESJ/\\nnQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyV2dE/CRUAUE8ybq/DoS\\nLc7QlYXh04K+McbhN724TbHahLTuDk5mR5TAunA8Nea4euRzknKdMFAz1eh9gyy3\\n5x4UfXQW1fIZqNo6WNrGxYJgWAXU+pov+OvxsMQWzqS4jrTHDHbblCCLKp1akwJk\\naFNyqgjAL373PcqXC+XAn8vHx4xHFoFP5lq4lLcJCOW5ee9v9El3w0USLwS+t1cF\\nRY3kuV6Njlr4zsRH9iM6/zaSuCALYWJ/JrPEurSJXzFZnWsvn6aQdeNeAn08+z0F\\nk2NwaauEo0xmLqzqTRGzjHqKKmeefN3/+M/FN2FrApDlxWQfhD2Y3USdAiN547Nj\\n1wIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvm2+kTrEQWZXuxhWzBdl\\nPCbQGqbrukbeS6JKSlQLJDC8ayZIxFxatqg1Q8UPyv89MVRsHOGlG1OqFaOEtPjQ\\nOo6j/moFwB4GPyJhJHOGpCKa4CLB5clhfDCLJw6ty7PcDU3T6yW4X4Qc5k4LRRWy\\nyzC8lVHfBdarN+1iEe0ALMOGoeiJjVn6i/AFxktRwgd8njqv/oWQyfjJZXkNMsb6\\n7ZDxNVAUrp/WXpE4Kq694bB9xa/pWsqv7FjQJUgTnEzvbN+qXnVPtA7dHcOYYJ8Z\\nSbrJUfHrf8TS5B54AiopFpWG+hIbjqqdigqabBqFpmjiRDZgDy4zJJj52xJZMnrp\\nrwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwEAcVmY3589O02pLA22f\\nMlarLyJUgy0BeJDG5AUsi17ct8sHZzRiv9zKQVCBk1CtZY//jyqnrM7iCBLWsyby\\nTiTOtGYHHApaLnNjjtaHdQ6zplhbc3g2XLy+4ab8GNKG3zc8iXpsQM6r+JO5n9pm\\nV9vollz9dkFxS9l+1P17lZdIgCh9O3EIFJv5QCd5c9l2ezHAan2OhkWhiDtldnH/\\nMfRXbz7X5sqlwWLa/jhPtvY45x7dZaCHGqNzbupQZs0vHnAVdDu3vAWDmT/3sXHG\\nvmGxswKA9tPU0prSvQWLz4LUCnGi/cC5R+fiu+fovFM/BwvaGtqBFIF/1oWVq7bZ\\n4wIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA25qGwNO1+qHygC8mjm8L\\n3I66mV/IzslgBDHC91mE8YcI5Fq0sdrtsbUhK3z89wIN/zOhbHX0NEiXm2GxUnsI\\nvb5tDZXAh7AbTnXTMVbxO/e/8sPLUiObGjDvjVzyzrxOeG87yK/oIiilwk9wTsIb\\nwMn2Grj4ht9gVKx3oGHYV7STNdWBlzSaJj4Ou7+5M1InjPDRFZG1K31D2d3IHByX\\nlmcRPZtPFTa5C1uVJw00fI4F4uEFlPclZQlR5yA0G9v+0uDgLcjIUB4eqwMthUWc\\ndHhlmrPp04LI19eksWHCtG30RzmUaxDiIC7J2Ut0zHDqUe7aXn8tOVI7dE9tTKQD\\nKQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7EC2bx7aRnf3TcRg5gmw\\nQOKNCUheCelK8hoXLMsKSJqmufyJ+IHUejpXGOpvyYRbACiJ5GiNcww20MVpTBU7\\nYESWB2QSU2eEJJXMq84qsZSO8WGmAuKpUckI+hNHKQYJBEDOougV6/vVVEm5c5bc\\nSLWQo0+/ciQ21Zwz5SwimX8ep1YpqYirO04gcyGZzAfGboXRvdUwA+1bZvuUXdKC\\n4zsCw2QALlcVpzPwjB5mqA/3a+SPgdLAiLOwWXFDRMnQw44UjsnPJFoXgEZiUpZm\\nEMS5gLv50CzQqJXK9mNzPuYXNUIc4Pw4ssVWe0OfN3Od90gl5uFUwk/G9lWSYnBN\\n3wIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\", nullptr};\\n\\nstatic const char *const community_public_keys[] = {\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtXl28loGwAH3ZGQXXgJQ\\n3omhIEiUb3z9Petjl+jmdtEQnMNUFEZiXkfJB02UFWBL1OoKKnjiGhcr5oGiIZKR\\nCoaL6SfmWe//7o8STM44stE0exzZcv8W4tWwjrzSWQnwh2JgSnHN64xoDQjdvG3X\\n9uQ1xXMXghWOKqEpgArpJQkHoPW3CD5sCS2NLFrBG6KgX0W+GTV5HaKhTMr2754F\\nl260drcBJZhLFCeesze2DXtQC+R9D25Zwn2ehHHd2Fd1M10ZL/iKN8NeerB4Jnph\\nw6E3orA0DusDLDLtpJUHhmpLoU/1eYQFQOpGw2ce5I88Tkx7SKnCRy1UiE7BA82W\\nYQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvTgQ+mJs8vG/TQTJ6sV+\\ntACTZTbmp8NkgTuwEyHZSNhX6W8FYwAqPzbePo7wudsUdBWV8j+kUYaBiqeiPUp0\\n7neO/3oTUQkMJLq9FeIXfoYkS3+/5CIuvsfas6PJP9U2ge6MV1Ndgbd7a12cmX8V\\n4eNwQRDv/H4zgL7YI2ZZSG1loxgMffZrpflNB87t/f0QYdmnwphMC5RqxiCkDZPA\\na5/5KbmD6kjLh8RRRw3lAZbPQe5r7o2Xqqwg9gc6rQ/WFBB1Oj+Q5Bggqznl6dCB\\nJcLOA7rhYatv/mvt1h6ogQwQ9FGRM3PifV9boZxOQGBAkMD6ngpd5kVoOxdygC7v\\ntwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7KvnA+Ixj4ZCLR+aXSFz\\nICGbQdVrZ/hhjImDQcWgWY+z/bEbybslDvy5KEPrxTNxKZ0VfFFAVEUj2cw8B5KI\\nnaK8U2VIpdD6LpEJvkOuWKg3bym4COhyAcRNqKKu/GPzS90wICJ2aaayF1mVoCIL\\ndsp2ZShSIVRJa55gVvfRN1ZEkqBnZryKNt/h3DNqqq2Sn3n3HIZ8H9oEO+L+2Efe\\nkyET7o9OHy6QZXhf4SJ8QlQAwxxe/L4bln8CBlBHKrUNNqxpjhC37EnY2jpuu3a9\\nEZcNFj8R4qIJx7hcltntZyKrEIXqc6I6x4oZ4qhZj3RQ5Lr+pJ++idoc1LmBS3k5\\nyQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7SF+5RZ9jXyruBkhxhk2\\nBSWPbohevxxv++7Uw0HXC/3Xw4jzii0tYaJ6O8QWXyggEAkvmONblAN1rfiz+h5M\\noJUQwHjTTZ8BmKUmWrNayVokUXLu4IpCAHk4uSXfx4U/AINnNfWW7z8mUJf6nGsM\\nXePuKPBRUsw+JmTWOXEIVrkc/66B+gpgi+DwRFLUPh96D8XRAhp7QbHE9UMD3HpA\\nmPMX7ICVsVS+NGdCHNsdWfH4noaESjgmMdApKekgeeo8Zu1pvQ3y8iew1xOQVBoR\\nV+PCGWAJYB7ulqBBkRz+NhPLWw7wRA4yLNcZVlZuDFxH9EoavWdfIyYYUn4efSz9\\ntQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAszmZ6Slv/oJvFpOLtSMx\\n58AKMia9y+qcVfw77/Alb3b+Qi5L2uy6nHfJElT7RIeeXhJ8mFglZ70MecTfj0jl\\n5WhW+yMg6jmPCJL2JMt/oeC4iY4Cf/3C9RHU4IO13VN4dnVQ5S+SEEmSbXnno9Pe\\n06yyVgZeJ0REJMV1JZj9gOPc/wbeLHsx4UC5qsu32Ammy6J7tS+k7JvRc9CPOEpe\\nIhWoZmpONydcI6IRfyH2xl4uLY3hWDrRei0I2zGH45G2hPNeTtRh27t+SzXO7h9j\\ny072CgHytRgQBiH711i8fe4bHMmtVPhPjFrbuzbJSgE7SyikrWIHMDsnPz443bdR\\ncQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAleywAb7xZKYTFE08gGA9\\nffTeYPRcECl/J060fUziIiFu0NHTOZO+a4BH2X+E1WjjNNQkbn00g+op4nqg3/U+\\nUaKuXNjWY2Rvd8s91fUD0YOdRpPmsTm2QqhgmYYzO8Oh3YXBNRpXaqALbjL9Nahw\\nYEAsI3o5yenZGUIEk3JaZFHsAZPL5wGgDVpZgmVUHJ0EO8N5LQh01aHxnP5+ey2z\\nL5h6IdWLubb07wEBk5bnmIvdhd6dIBzUql27BAqvxKJbW0/okjrhIgcIANDCavfV\\nL8UP7MCGnfozK7VIl5DG85gCQVAD8+lGUDzOuhzZjl7XKpkFAIWaS8pl4AJbJuG8\\nnwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxiKgcR7Kb1CGTNczbuX+\\nS7OFpnVLDD5XGVKvYWxL+2By2QRFPWtMs8c24omLIgZ/CWBFPraMiNKS4+V9ar2C\\nwJhToJnAOKyayA0Gw2wNZx1mgHAZ/5mT+ImfkmZu2HPwtzJmJDQlESD4p40BWBNa\\nZpWFGPMKn4GqvOOSGevC/r9inXm6NaPkM+B/piVDEgiJ7g/kpoqImmNb/c2/3XG5\\n3kbDIHdbd2m3A3jWCjNGSANKsR5C0/rZtvsA8tjDlNWIuKmkU3C2nfj3UduU4dNP\\nCisod/pDY8ov0U9sdkM9XZsTXjtbAIGLzMshmOv4ajRFUueGnsZW0GRqp9DSnKmj\\n2QIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuh334hUmJcdDJUSmeXqE\\nGUfGnASD2QrnuoS+gsXgW5BQW8YMDFASvADQhoDUdcwZMlAF+p+CxKCX/gBp40nC\\n5eyPXv1e0K6PFcCdHtJq8MhGYAr1sy+7cOpzv0r9whobYUykGoHjdwZeu3VbA3uz\\ngo80oYQlwY+v4zZFafCz3cXw8u7n/9PlddgeqHuIPsNZLocICuBUxwg5rHTzycg2\\nPa68CRselONGN12V0/wlOg+NZpKCym58CM9SS/0v4YZ6LnmINo8gdRYnGE2zhvey\\npHR8IJ8WSJXbl8NwyIY1AmtT/Z0dbAclfD8Wt/w5KA/sttnQzrB7fPsLRyLP1Alq\\niQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvWuRMEbez/Ud2o/0KA04\\nK9u3HePWud9rEqMsPv2HlclH3k+cezoUJzVre0lopv3R4aG3LDoFETrgGgUVrfPG\\nz3Zh7vyk0kb4IGkv+kLQu/cWQXyNzigxV+WQnpIWQ28vrP45y5f+GhwwgzFaDAQR\\nu1o1HH1FEnP7SSzHVvisNTecY95+F5AOvtOOUg4VlegXdUeGZHEza/0D9V8gODPL\\nDzbOJDDiqX8ahhRnIZyGEg6y7QqftZFz7j0siCHTXXYJBOcPjD4TqTUNpGvBox44\\nwgLlLcDsZ/n2Ck4doLXxVz9F80VKOriHSk+qIwseykKVzWQDQTOMOsjCmQsDvram\\nRwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyJmGd1GuBv/WD80IcVyr\\ndZcmuYe/7azLuV1wsgtH4gsUx+ifUwLZUhLFGOTAPFitbFYPPdhQKncO+BcbvOIo\\n9FGKj9jGVpMU6C+0JQfi+koESevtO1tYzG8c2dMOGNUO0Hlj2Hezm3tZY4nAbo1J\\nDYqQSY7qvOYZPFvOS/zL+q2vMx93w9jDHJK4iU02ovAqK9xCWfTp4W7rtbDeTgiX\\nW/75rMG8DWI1ZHA2JXAOFPsiOHa0/yyvCvUIWvRuNHqTTN5NFiJRIcbTCKKbNwNM\\nxcNkBQCx4xwOqD9TkDbHpBOC/pfW7j3ygJdYRjFFqm10+KwPACYo/f0n4n4DI8Zz\\ntwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnmxbunsK+2pL8Cva9F8E\\n9o/dQ35TuIqcgpl9/oIc++x+6G5/8UT5mgGCQTITJRIAPnHsZ9XEnMxTAuSCDkYG\\nCA3JMl1MT7Zxu8TQJBPiXxOaAE1UmA13JuQ2Uu0v7T6TucQxR9KMvcdCxOZ5cBU4\\nuyJObnZVy/WjM2vWcWDUaYGfMss3eYxcDpavspBANdtSZfv11+8/VC+gEGBOe+oW\\nzDR+BlQx//MAzwSP5HVQcmLHsT073IvkoUWJUxSCCwlLe60ylpY16BLT6dB0RU8B\\nsxFcIwmYg0kq19EEPPvZLvRKjG/TJRm1MFzOE5LP2VxLGdMltWYEVsBZHTcWU7HR\\n8wIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlo7eDZOpCptanajUtDK3\\nq8Q/ykxmDDw6lVSiLBm54zwMxaqfM+tV/xqalvIVv3BrucRkCs6H+R0bpd7XhbE5\\na7ZFSrWCBf1V6y/NZrEn4qcRbk/WsG4UFqu7CG4r+EgQ4nmoIH/A5+e8FUcur3Y8\\n2ie9Foi1CUpZojWYZJeHKbb2yYn4MFHszEb5w9HVxY+i9jR1B8Rvn6OEK3OYDrtA\\nKnPXp4OiDx6CviYEmipX815PPj7Sv8KKL96JqGWjC4kYw6ALgV/GxiX++tv6rh2O\\npaW9MBv1y+5oZ8ls5S2T/LXbxDpjUEKC9guSSWmsPHRMxOumXsw0H43grC3Ce8Ui\\nCwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ACgf0kJeQgDh+vHj2aj\\nK/6FQ794MknLxlwTARGlktoVwZgW/qc6vMZsILRUP1gb/gPXdpSTqqad/GLG4f5R\\n1Ji1It6BniJOPWu1YyTz0C/BXzTGWbwPnIaawbpQE8n4A+tjGGvAoauPtzr0bWfV\\nXOXPfIW9XB51dcaVTZgHN55Y8Yd/Pcu9/lqXqXyE23tDLXR/QgGpwK9VxTSbRmuC\\nWspwqWY6L3MIw+3HIXERTM1uNhc9oHxMOCRbJmUghG0wCWB0ed3Xhbnl9mHlX+l1\\nrfCJAP4lVWKFjkKBNUejaf+WHxASMjrQubgHLZ2fpf3Ra8TfI3rgPABsAqEIFw3T\\nQwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt635/P50bMbEDTapjAQz\\nARTb3y8jMHxVruX0tJU1tycmkX3J8tBALmc6TkSHNTJcQmR8L8Sj3h76l/vuL373\\nHFSGZ4xghBQqR1lUd2kVomoh+rzEte+0rHWm0JMhjmTQBx+AkDCOw4z3vi5AxWx0\\n4EbYpQm2akVGKXQrQPyds0UirmdLACCH6WM6exgAXr75DB4PUpG85oI9Q+5ee1Km\\n+4atVJ4FNa6ZnjWccrlMYT0W7a0Y7feJPAPvfizrs2MG9/ijyBX34eCWA5dtUSIm\\n2uqI6DxITZlLTvXVDSKQGlq5TEGMvRULWTatqWy4g+tOZ8rSbRuj32pcBnXlwuVu\\n7QIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwqO3yWSLKqz1uQ54iFd/\\nVcQzgT6chLVuhktt7EFvi3tKaQqz2h2KPkDR+MssRV/BZ/41GNlR6r6p5CaPVDDe\\nCuj5IcxrIFZIOBMBi1YZ/bknF9edJacINxNfGK/lXBNEAdUvxcOxX8WeP69uvl2l\\nSKyO3yAdx6HOyL9if95bYQD19HYPZzbfccPX1aD4pjnej6uMfd7yZErH7i8y0oj4\\neSKSe1CisjFlR9NzRGO42jU9rtqnAFH9sK5wU9xKQ7bQwlz7yKBF2RuuQweMpXb6\\nlSObI7ZqYN+7jkf9F5hKRx4kX3+MMBeYmFOy1aYZ08u6sdJ2ua/hFNSDRg7e/UCe\\nAwIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkJihnfMECaa6YCg6avam\\ncb8Sy1GshJ7c7+EW6C4vnspSSvEi04AEBB29pnEF9+VO6VSUHLxunVCpbmKFaLH+\\n5fDLnc/wCkjPQww49da9MEScCmVGjROlmog65cxQbv4lfxyw55sFV3s/5CPcGlVc\\n1gojHRABrx4YocpeYies04mEVoOYg1DBG4Uf+aFd5+hm3ZtBa4mqTK2iQa4ILkHa\\na0/Us1drRuDjjI4zSbgRzy9x0JVDvqDdLubHyaEf7d7SdrKzodhydG84qpsPFxIj\\nLK7Bu5v7P4ZTJmxMG3PBM2kB//hlYVR4vO4VEu66mQIM6km+vT9cwxz77qIJhLn3\\nywIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9NbP7ijUxZh4j0NVF6yO\\nIZ0rzROwl4pP4HGeN+Woyi9+qpdE874WlVoquGEpsshF4Ojzbu2BtXuihb783awa\\nGLx66MYPeID1FjTKmuCJ2aluOP+DkVo6K1EoqVJXyeIxZzVSqhSIuAdb/vmPlgLz\\nFzdk3FgNNOERuGV363DRGz1YxZVnJeSs76g+/9ddhMk8cqIRup5S4YgTOSr0vKem\\n1E6lyE8IbLoq9J7w5Ur8VjzE2cI+eLKGFqr46Q8pf0pJq72gd+Z3mH5D2LmvEtAR\\n9jAQXVlLfHauQR2M0K6mqDy9GxL19OU4tGO+GY86VvDTU+wZppAZRz9AKoL1fwfI\\nBQIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjrI16GdC2zJriLbyzcre\\nAqvckBSTMd4bdGaodUBNBTBVbITsOw/k7D62y2hSZHt2nHOyEVkJINJHADrpNZuY\\nybS4ssEXxD8+NnjATqQxDMuSz8lUj/Jnf49uzLh84fep3DTksDcQX6Nvio5q8Xbh\\nHRgvl5I+tPfLtme0oW9cVuVja2i5lHB3SzYCW9Kk/V4/d2WiceYf91a1Nae6m7QV\\n5bmbYoHmsxT8refTQq+5lAhzVXYU9QRgiKdbE8sSmkV+YiZEtGijefUXgmOxx3I9\\nB3y03796WBS/RHpSzdMNJw/xPWJcSEMqaUdSYr0DuPCnrn7ojFeF/EFC47CBq5DU\\nswIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\",\\n    R\\\"(\\n-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjS1+My6OhQCCD1DgrzKu\\ndb4Fvc3aqqEhQyjqMLnalp0uoGFpSLoPsZiPGloTE8FSs1ZBFKQ8h2SsGwSdhRKF\\nxIqoOnS0B/ORjGJxTj7Q2YWjzkCZUD4Ul2AxIbv3TmZM2LeyHJL3A71tSuck8EQY\\nPE2aj1tLzXsSfRaByy5xwXiU6UpnwCY1xb8tK8QxavRCo5T9Si9tNsolStoNVXV0\\nk9EbTcRNnxCvab/oqjvgyRuSmIES00v8jZOGQZQUpw02RN6yCBeX2i8GPsGjj/T9\\n6Gu1Z3G4zUjLlJxl8vjo8KIDaQ8NVWT0j7gx9Knvb5tWnAORI1aJA8AHQvaoOT1W\\n1wIDAQAB\\n-----END PUBLIC KEY-----\\n)\\\", nullptr};\\n\\nconst vector<string> ExtensionHelper::GetPublicKeys(bool allow_community_extensions) {\\n\\tvector<string> keys;\\n\\tfor (idx_t i = 0; public_keys[i]; i++) {\\n\\t\\tkeys.emplace_back(public_keys[i]);\\n\\t}\\n\\tif (allow_community_extensions) {\\n\\t\\tfor (idx_t i = 0; community_public_keys[i]; i++) {\\n\\t\\t\\tkeys.emplace_back(community_public_keys[i]);\\n\\t\\t}\\n\\t}\\n\\treturn keys;\\n}\\n\\n} // namespace duckdb\\n\",\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\",\"version\":1}}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":30423.363000000001,"tid":55670,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":30466.049999999999,"tid":55670,"dur":2130.8130000000019,"args":{}},{"pid":0,"ph":"X","name":"Queued:Update","ts":32813.589,"tid":55670,"dur":2.3600000000005821,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"M","name":"thread_name","tid":55686,"args":{"name":"sion_helper.cpp"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":30416.806,"tid":55670,"id":0,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":32905.080000000002,"tid":55686,"bp":"e","id":0,"cat":"mock_cat"},{"pid":0,"ph":"i","name":"Log","ts":33859.139000000003,"tid":55686,"args":{"Message":"config note at /home/prady/code/duckdb-snowflake/.clangd:1:0: Parsing config fragment"}},{"pid":0,"ph":"i","name":"Log","ts":34272.705999999998,"tid":55686,"args":{"Message":"config note at /home/prady/code/duckdb-snowflake/.clangd:1:0: Parsed 1 fragments from file"}},{"pid":0,"ph":"i","name":"Log","ts":34299.377,"tid":55686,"args":{"Message":"Config fragment: compiling /home/prady/code/duckdb-snowflake/.clangd:1 -> 0x0000704F68004610 (trusted=false)"}},{"pid":0,"ph":"X","name":"ConfigCompile","ts":34285.086000000003,"tid":55686,"dur":25.862999999997555,"args":{"ConfigFile":"/home/prady/code/duckdb-snowflake/.clangd"}},{"pid":0,"ph":"i","name":"Log","ts":34518.995000000003,"tid":55686,"args":{"Message":"config note at /home/prady/code/duckdb-snowflake/duckdb/.clangd:1:0: Parsing config fragment"}},{"pid":0,"ph":"i","name":"Log","ts":34533.148000000001,"tid":55686,"args":{"Message":"config note at /home/prady/code/duckdb-snowflake/duckdb/.clangd:1:0: Parsed 1 fragments from file"}},{"pid":0,"ph":"i","name":"Log","ts":34541.082999999999,"tid":55686,"args":{"Message":"Config fragment: compiling /home/prady/code/duckdb-snowflake/duckdb/.clangd:1 -> 0x0000704F680045C0 (trusted=false)"}},{"pid":0,"ph":"X","name":"ConfigCompile","ts":34538.392,"tid":55686,"dur":8.5230000000010477,"args":{"ConfigFile":"/home/prady/code/duckdb-snowflake/duckdb/.clangd"}},{"pid":0,"ph":"X","name":"getConfig","ts":32908.946000000004,"tid":55686,"dur":2253.7239999999947,"args":{"path":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":35177.152999999998,"tid":55686,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":35191.305999999997,"tid":55686,"args":{"Message":">>> {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/publishDiagnostics\",\"params\":{\"diagnostics\":[],\"uri\":\"file:///home/prady/code/duckdb-snowflake/.clangd\"}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":35197.807999999997,"tid":55686,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":35205.853000000003,"tid":55686,"args":{"Message":">>> {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/publishDiagnostics\",\"params\":{\"diagnostics\":[],\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/.clangd\"}}\n"}},{"pid":0,"ph":"X","name":"getConfig","ts":35213.963000000003,"tid":55686,"dur":3.0849999999991269,"args":{"path":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":35377.919000000002,"tid":55686,"args":{"Message":"Failed to find compilation database for /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":35390.152000000002,"tid":55686,"dur":25.605999999999767,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":35449.491000000002,"tid":55686,"args":{"Message":"ASTWorker building file /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp version 1 with command clangd fallback\n[/home/prady/code/duckdb-snowflake/duckdb/src/main/extension]\n/usr/bin/clang -std=c++11 -DDUCKDB -DDUCKDB_BUILD_LIBRARY -DDUCKDB_MAIN_LIBRARY -DDUCKDB_EXTENSION_QUACK_LINKED=1 -std=c++17 -DDUCKDB_EXTENSION_API -I${workspaceFolder}/src/include -I${workspaceFolder}/duckdb/src/include -I${workspaceFolder}/duckdb/third_party -I${workspaceFolder}/vcpkg_installed/x64-linux/include -I/usr/include -I/usr/local/include -Wno-unqualified-std-cast-call -resource-dir=/usr/lib/llvm-18/lib/clang/18 -- /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":35630.900999999998,"tid":55670,"args":{"Message":"<<< {\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"textDocument/documentSymbol\",\"params\":{\"textDocument\":{\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":35647.542999999998,"tid":55670,"args":{"Message":"<-- textDocument/documentSymbol(1)"}},{"pid":0,"ph":"i","name":"Log","ts":37188.169000000002,"tid":55670,"args":{"Message":"<<< {\"id\":2,\"jsonrpc\":\"2.0\",\"method\":\"textDocument/documentLink\",\"params\":{\"textDocument\":{\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":37204.002,"tid":55670,"args":{"Message":"<-- textDocument/documentLink(2)"}},{"pid":0,"ph":"i","name":"Log","ts":37235.669000000002,"tid":55670,"args":{"Message":"<<< {\"id\":3,\"jsonrpc\":\"2.0\",\"method\":\"textDocument/inlayHint\",\"params\":{\"range\":{\"end\":{\"character\":21,\"line\":128},\"start\":{\"character\":0,\"line\":0}},\"textDocument\":{\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":37283.682999999997,"tid":55670,"args":{"Message":"<-- textDocument/inlayHint(3)"}},{"pid":0,"ph":"i","name":"Log","ts":47199.428999999996,"tid":55686,"args":{"Message":"Driver produced command: cc1 -cc1 -triple x86_64-pc-linux-gnu -fsyntax-only -disable-free -clear-ast-before-backend -disable-llvm-verifier -discard-value-names -main-file-name extension_helper.cpp -mrelocation-model pic -pic-level 2 -pic-is-pie -mframe-pointer=all -fmath-errno -ffp-contract=on -fno-rounding-math -mconstructor-aliases -funwind-tables=2 -target-cpu x86-64 -tune-cpu generic -debugger-tuning=gdb -fdebug-compilation-dir=/home/prady/code/duckdb-snowflake/duckdb/src/main/extension -fcoverage-compilation-dir=/home/prady/code/duckdb-snowflake/duckdb/src/main/extension -resource-dir /usr/lib/llvm-18/lib/clang/18 -D DUCKDB -D DUCKDB_BUILD_LIBRARY -D DUCKDB_MAIN_LIBRARY -D DUCKDB_EXTENSION_QUACK_LINKED=1 -D DUCKDB_EXTENSION_API -I ${workspaceFolder}/src/include -I ${workspaceFolder}/duckdb/src/include -I ${workspaceFolder}/duckdb/third_party -I ${workspaceFolder}/vcpkg_installed/x64-linux/include -I /usr/include -I /usr/local/include -internal-isystem /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13 -internal-isystem /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/x86_64-linux-gnu/c++/13 -internal-isystem /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/backward -internal-isystem /usr/lib/llvm-18/lib/clang/18/include -internal-isystem /usr/local/include -internal-isystem /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../x86_64-linux-gnu/include -internal-externc-isystem /usr/include/x86_64-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -Wno-unqualified-std-cast-call -std=c++17 -fdeprecated-macro -ferror-limit 19 -fgnuc-version=4.2.1 -fskip-odr-check-in-gmf -fcxx-exceptions -fexceptions -no-round-trip-args -faddrsig -D__GCC_HAVE_DWARF2_CFI_ASM=1 -x c++ /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"M","name":"thread_name","tid":55687,"args":{"name":"sion_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":47363.035000000003,"tid":55687,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":47415.796999999999,"tid":55687,"args":{"Message":">>> {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/clangd.fileStatus\",\"params\":{\"state\":\"parsing includes, running Update\",\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":47427.415000000001,"tid":55687,"args":{"Message":"Building first preamble for /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp version 1"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":32896.254000000001,"tid":55686,"id":1,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":48518.805,"tid":55687,"bp":"e","id":1,"cat":"mock_cat"},{"pid":0,"ph":"i","name":"Log","ts":83247.296000000002,"tid":55687,"args":{"Message":"Built preamble of size 224128 for file /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp version 1 in 0.03 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":83299.425000000003,"tid":55687,"dur":412.52899999999499,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":48509.271999999997,"tid":55687,"dur":35211.278000000006,"args":{"File":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":83755.046000000002,"tid":55687,"args":{"Message":"--> workspace/semanticTokens/refresh(0)"}},{"pid":0,"ph":"M","name":"thread_name","tid":55689,"args":{"name":"ion_helper.cpp1"}},{"pid":0,"ph":"i","name":"Log","ts":83784.241999999998,"tid":55687,"args":{"Message":">>> {\"id\":0,\"jsonrpc\":\"2.0\",\"method\":\"workspace/semanticTokens/refresh\",\"params\":null}\n"}},{"pid":0,"ph":"i","name":"Log","ts":83836.388999999996,"tid":55686,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":83910.982000000004,"tid":55686,"args":{"Message":">>> {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/clangd.fileStatus\",\"params\":{\"state\":\"parsing includes, running Build AST\",\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}\n"}},{"pid":0,"ph":"X","name":"getConfig","ts":83935.816000000006,"tid":55686,"dur":7.0989999999874271,"args":{"path":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"M","name":"thread_name","tid":55688,"args":{"name":"IndexStdlib"}},{"pid":0,"ph":"i","name":"Log","ts":84854.308000000005,"tid":55688,"args":{"Message":"Indexing c++17 standard library in the context of /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":85542.191999999995,"tid":55670,"args":{"Message":"<<< {\"id\":0,\"jsonrpc\":\"2.0\",\"result\":null}\n"}},{"pid":0,"ph":"i","name":"Log","ts":85557.042000000001,"tid":55670,"args":{"Message":"<-- reply(0)"}},{"pid":0,"ph":"i","name":"Log","ts":85658.553,"tid":55689,"args":{"Message":"indexed preamble AST for /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp version 1:\n  symbol slab: 10 symbols, 6536 bytes\n  ref slab: 0 symbols, 0 refs, 128 bytes\n  relations slab: 0 relations, 24 bytes"}},{"pid":0,"ph":"i","name":"Log","ts":85789.903999999995,"tid":55689,"args":{"Message":"Build dynamic index for header symbols with estimated memory usage of 52384 bytes"}},{"pid":0,"ph":"X","name":"PreambleIndexing","ts":83768.070000000007,"tid":55689,"dur":2027.426999999996,"args":{}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":84198.020999999993,"tid":55686,"dur":1641.1190000000061,"args":{"File":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":91949.139999999999,"tid":55670,"args":{"Message":"<<< {\"id\":4,\"jsonrpc\":\"2.0\",\"method\":\"textDocument/semanticTokens/full\",\"params\":{\"textDocument\":{\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":91972.926999999996,"tid":55670,"args":{"Message":"<-- textDocument/semanticTokens/full(4)"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":85873.009999999995,"tid":55686,"dur":6839.0500000000029,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":96810.346000000005,"tid":55686,"dur":16474.977999999988,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":116883.823,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"DefaultExtension\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":116970.796,"tid":55686,"dur":2.1220000000030268,"args":{"results":0}},{"pid":0,"ph":"i","name":"Log","ts":116994.702,"tid":55686,"args":{"Message":"Dex query tree: false"}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":116979.04300000001,"tid":55686,"dur":23.005999999993946,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":116920.853,"tid":55686,"dur":84.04299999999057,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":117008.644,"tid":55686,"dur":0.84399999999732245,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":117011.463,"tid":55686,"dur":1.0099999999947613,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":117007.762,"tid":55686,"dur":6.3369999999995343,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":116919.42,"tid":55686,"dur":96.415000000008149,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"i","name":"Log","ts":117712.041,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"idx_t\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":117771.655,"tid":55686,"dur":1.0380000000004657,"args":{"results":0}},{"pid":0,"ph":"i","name":"Log","ts":117781.98699999999,"tid":55686,"args":{"Message":"Dex query tree: false"}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":117776.38499999999,"tid":55686,"dur":9.9830000000074506,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":117770.636,"tid":55686,"dur":17.990999999994528,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":117791.465,"tid":55686,"dur":0.76200000000244472,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":117793.83500000001,"tid":55686,"dur":0.66099999999278225,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":117790.822,"tid":55686,"dur":5.3359999999956926,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":117769.708,"tid":55686,"dur":28.25,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"i","name":"Log","ts":118019.193,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"DefaultExtensionCount\" in scopes: [ExtensionHelper::, duckdb::ExtensionHelper::]"}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":118028.23,"tid":55686,"dur":1.0200000000040745,"args":{"results":0}},{"pid":0,"ph":"i","name":"Log","ts":118041.78599999999,"tid":55686,"args":{"Message":"Dex query tree: false"}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":118034.319,"tid":55686,"dur":10.892999999996391,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":118027.514,"tid":55686,"dur":19.562000000005355,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":118050.28999999999,"tid":55686,"dur":0.98300000000745058,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":118053.72500000001,"tid":55686,"dur":0.7529999999969732,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":118049.537,"tid":55686,"dur":9.0559999999968568,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":118026.944,"tid":55686,"dur":35.845999999990454,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"i","name":"Log","ts":118397.935,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"DefaultExtension\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":118611.133,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"GetDefaultExtension\" in scopes: [ExtensionHelper::, duckdb::ExtensionHelper::]"}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":118621.162,"tid":55686,"dur":1.0380000000004657,"args":{"results":0}},{"pid":0,"ph":"i","name":"Log","ts":118632.56,"tid":55686,"args":{"Message":"Dex query tree: false"}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":118624.59699999999,"tid":55686,"dur":11.50800000000163,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":118620.382,"tid":55686,"dur":17.955000000001746,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":118641.037,"tid":55686,"dur":0.70700000000942964,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":118643.36,"tid":55686,"dur":0.63400000000547152,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":118640.458,"tid":55686,"dur":5.0420000000012806,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":118619.66499999999,"tid":55686,"dur":27.552999999999884,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"i","name":"Log","ts":118718.054,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"idx_t\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":118992.355,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"AllowAutoInstall\" in scopes: [ExtensionHelper::, duckdb::ExtensionHelper::]"}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":119044.125,"tid":55686,"dur":1.0380000000004657,"args":{"results":0}},{"pid":0,"ph":"i","name":"Log","ts":119056.16499999999,"tid":55686,"args":{"Message":"Dex query tree: false"}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":119048.39599999999,"tid":55686,"dur":11.755000000004657,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":119043.44500000001,"tid":55686,"dur":18.891999999992549,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":119064.83500000001,"tid":55686,"dur":0.83599999999569263,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":119067.159,"tid":55686,"dur":0.7440000000060536,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":119064.238,"tid":55686,"dur":5.2260000000096625,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":119042.518,"tid":55686,"dur":28.673000000009779,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"i","name":"Log","ts":119155.105,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"string\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":119382.75999999999,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"CanAutoloadExtension\" in scopes: [ExtensionHelper::, duckdb::ExtensionHelper::]"}},{"pid":0,"ph":"i","name":"Log","ts":119466.711,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"string\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":119552.224,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"string\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":119745.852,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"AddExtensionInstallHintToErrorMsg\" in scopes: [ExtensionHelper::, duckdb::ExtensionHelper::]"}},{"pid":0,"ph":"i","name":"Log","ts":119895.78200000001,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"ClientContext\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":119968.428,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"string\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":120029.52899999999,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"string\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":120088.454,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"string\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":120281.66800000001,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"AddExtensionInstallHintToErrorMsg\" in scopes: [ExtensionHelper::, duckdb::ExtensionHelper::]"}},{"pid":0,"ph":"i","name":"Log","ts":120555.151,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"DatabaseInstance\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"i","name":"Log","ts":120626.649,"tid":55686,"args":{"Message":"Trying to fix unresolved name \"string\" in scopes: [, duckdb::]"}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":123845.14,"tid":55686,"dur":4212.0120000000024,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":128141.59,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128169.133,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128178.235,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128184.397,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128189.109,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128230.54700000001,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128237.16,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128242.11900000001,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128246.83100000001,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128251.129,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":128255.482,"tid":55686,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":128723.887,"tid":55686,"dur":1.6349999999947613,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":128284.53999999999,"tid":55686,"dur":445.31700000001001,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":128732.171,"tid":55686,"dur":772.77499999999418,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":83953.797999999995,"tid":55686,"dur":45756.485000000001,"args":{"File":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":129844.958,"tid":55686,"args":{"Message":"indexed file AST for /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp version 1:\n  symbol slab: 17 symbols, 8160 bytes\n  ref slab: 16 symbols, 44 refs, 4608 bytes\n  relations slab: 0 relations, 24 bytes"}},{"pid":0,"ph":"i","name":"Log","ts":129865.723,"tid":55686,"args":{"Message":"Build dynamic index for main-file symbols with estimated memory usage of 20680 bytes"}},{"pid":0,"ph":"i","name":"Log","ts":129949.87699999999,"tid":55686,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":129997.579,"tid":55686,"args":{"Message":">>> {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/publishDiagnostics\",\"params\":{\"diagnostics\":[{\"code\":\"pp_file_not_found\",\"message\":\"'duckdb/main/extension_helper.hpp' file not found\",\"range\":{\"end\":{\"character\":43,\"line\":0},\"start\":{\"character\":9,\"line\":0}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'DefaultExtension'\",\"range\":{\"end\":{\"character\":29,\"line\":100},\"start\":{\"character\":13,\"line\":100}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'idx_t'\",\"range\":{\"end\":{\"character\":5,\"line\":128},\"start\":{\"character\":0,\"line\":128}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"undeclared_var_use\",\"message\":\"Use of undeclared identifier 'ExtensionHelper'\",\"range\":{\"end\":{\"character\":21,\"line\":128},\"start\":{\"character\":6,\"line\":128}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'DefaultExtension'\",\"range\":{\"end\":{\"character\":16,\"line\":135},\"start\":{\"character\":0,\"line\":135}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"undeclared_var_use\",\"message\":\"Use of undeclared identifier 'ExtensionHelper'\",\"range\":{\"end\":{\"character\":32,\"line\":135},\"start\":{\"character\":17,\"line\":135}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'idx_t'\",\"range\":{\"end\":{\"character\":59,\"line\":135},\"start\":{\"character\":54,\"line\":135}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"undeclared_var_use\",\"message\":\"Use of undeclared identifier 'ExtensionHelper'\",\"range\":{\"end\":{\"character\":20,\"line\":148},\"start\":{\"character\":5,\"line\":148}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'string'\",\"range\":{\"end\":{\"character\":51,\"line\":148},\"start\":{\"character\":45,\"line\":148}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"undeclared_var_use\",\"message\":\"Use of undeclared identifier 'ExtensionHelper'\",\"range\":{\"end\":{\"character\":20,\"line\":158},\"start\":{\"character\":5,\"line\":158}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'string'\",\"range\":{\"end\":{\"character\":55,\"line\":158},\"start\":{\"character\":49,\"line\":158}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'string'\",\"range\":{\"end\":{\"character\":6,\"line\":174},\"start\":{\"character\":0,\"line\":174}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"undeclared_var_use\",\"message\":\"Use of undeclared identifier 'ExtensionHelper'\",\"range\":{\"end\":{\"character\":22,\"line\":174},\"start\":{\"character\":7,\"line\":174}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'ClientContext'\",\"range\":{\"end\":{\"character\":71,\"line\":174},\"start\":{\"character\":58,\"line\":174}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'string'\",\"range\":{\"end\":{\"character\":94,\"line\":174},\"start\":{\"character\":88,\"line\":174}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'string'\",\"range\":{\"end\":{\"character\":70,\"line\":175},\"start\":{\"character\":64,\"line\":175}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'string'\",\"range\":{\"end\":{\"character\":6,\"line\":179},\"start\":{\"character\":0,\"line\":179}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"undeclared_var_use\",\"message\":\"Use of undeclared identifier 'ExtensionHelper'\",\"range\":{\"end\":{\"character\":22,\"line\":179},\"start\":{\"character\":7,\"line\":179}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'DatabaseInstance'\",\"range\":{\"end\":{\"character\":74,\"line\":179},\"start\":{\"character\":58,\"line\":179}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"unknown_typename\",\"message\":\"Unknown type name 'string'\",\"range\":{\"end\":{\"character\":92,\"line\":179},\"start\":{\"character\":86,\"line\":179}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"},{\"code\":\"fatal_too_many_errors\",\"message\":\"Too many errors emitted, stopping now\",\"range\":{\"end\":{\"character\":0,\"line\":0},\"start\":{\"character\":0,\"line\":0}},\"relatedInformation\":[],\"severity\":1,\"source\":\"clang\"}],\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\",\"version\":1}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":130124.962,"tid":55686,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"i","name":"Log","ts":130152.70699999999,"tid":55686,"args":{"Message":">>> {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/inactiveRegions\",\"params\":{\"regions\":[{\"end\":{\"character\":63,\"line\":57},\"start\":{\"character\":0,\"line\":57}},{\"end\":{\"character\":39,\"line\":62},\"start\":{\"character\":0,\"line\":62}},{\"end\":{\"character\":28,\"line\":66},\"start\":{\"character\":0,\"line\":66}},{\"end\":{\"character\":32,\"line\":70},\"start\":{\"character\":0,\"line\":70}},{\"end\":{\"character\":29,\"line\":74},\"start\":{\"character\":0,\"line\":74}},{\"end\":{\"character\":30,\"line\":78},\"start\":{\"character\":0,\"line\":78}},{\"end\":{\"character\":29,\"line\":82},\"start\":{\"character\":0,\"line\":82}},{\"end\":{\"character\":33,\"line\":86},\"start\":{\"character\":0,\"line\":86}},{\"end\":{\"character\":37,\"line\":90},\"start\":{\"character\":0,\"line\":90}},{\"end\":{\"character\":14,\"line\":160},\"start\":{\"character\":0,\"line\":160}},{\"end\":{\"character\":2,\"line\":425},\"start\":{\"character\":0,\"line\":423}},{\"end\":{\"character\":2,\"line\":449},\"start\":{\"character\":0,\"line\":436}},{\"end\":{\"character\":2,\"line\":463},\"start\":{\"character\":0,\"line\":453}},{\"end\":{\"character\":2,\"line\":472},\"start\":{\"character\":0,\"line\":468}},{\"end\":{\"character\":45,\"line\":479},\"start\":{\"character\":0,\"line\":479}},{\"end\":{\"character\":41,\"line\":486},\"start\":{\"character\":0,\"line\":486}},{\"end\":{\"character\":42,\"line\":493},\"start\":{\"character\":0,\"line\":493}},{\"end\":{\"character\":43,\"line\":500},\"start\":{\"character\":0,\"line\":500}},{\"end\":{\"character\":44,\"line\":507},\"start\":{\"character\":0,\"line\":507}},{\"end\":{\"character\":42,\"line\":513},\"start\":{\"character\":0,\"line\":513}},{\"end\":{\"character\":43,\"line\":520},\"start\":{\"character\":0,\"line\":520}},{\"end\":{\"character\":46,\"line\":527},\"start\":{\"character\":0,\"line\":527}},{\"end\":{\"character\":50,\"line\":534},\"start\":{\"character\":0,\"line\":534}},{\"end\":{\"character\":42,\"line\":541},\"start\":{\"character\":0,\"line\":541}},{\"end\":{\"character\":51,\"line\":548},\"start\":{\"character\":0,\"line\":548}}],\"textDocument\":{\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}}\n"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":130191.803,"tid":55686,"dur":382.62699999999313,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":129720.29399999999,"tid":55686,"dur":858.45200000000477,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":83933.831999999995,"tid":55686,"dur":46648.680000000008,"args":{}},{"pid":0,"ph":"X","name":"Update","ts":32896.254000000001,"tid":55686,"dur":50875.455000000002,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":30416.806,"tid":55670,"dur":3319.7630000000026,"args":{"Params":{"textDocument":{"languageId":"cpp","text":"#include \"duckdb/main/extension_helper.hpp\"\n\n#include \"duckdb/common/file_system.hpp\"\n#include \"duckdb/common/serializer/binary_deserializer.hpp\"\n#include \"duckdb/common/serializer/buffered_file_reader.hpp\"\n#include \"duckdb/common/string_util.hpp\"\n#include \"duckdb/common/windows.hpp\"\n#include \"duckdb/logging/logger.hpp\"\n#include \"duckdb/main/client_context.hpp\"\n#include \"duckdb/main/database.hpp\"\n#include \"duckdb/main/extension.hpp\"\n#include \"duckdb/main/extension_install_info.hpp\"\n\n// Note that c++ preprocessor doesn't have a nice way to clean this up so we need to set the defines we use to false\n// explicitly when they are undefined\n#ifndef DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED\n#define DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_ICU_LINKED\n#define DUCKDB_EXTENSION_ICU_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_EXCEL_LINKED\n#define DUCKDB_EXTENSION_EXCEL_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_PARQUET_LINKED\n#define DUCKDB_EXTENSION_PARQUET_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_TPCH_LINKED\n#define DUCKDB_EXTENSION_TPCH_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_TPCDS_LINKED\n#define DUCKDB_EXTENSION_TPCDS_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_HTTPFS_LINKED\n#define DUCKDB_EXTENSION_HTTPFS_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_JSON_LINKED\n#define DUCKDB_EXTENSION_JSON_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_JEMALLOC_LINKED\n#define DUCKDB_EXTENSION_JEMALLOC_LINKED false\n#endif\n\n#ifndef DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\n#define DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED false\n#endif\n\n// Load the generated header file containing our list of extension headers\n#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS && !defined(DUCKDB_AMALGAMATION)\n#include \"duckdb/main/extension/generated_extension_loader.hpp\"\n#else\n// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds, after that\n//\t\t these can be removed\n#if DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED\n#include \"core_functions_extension.hpp\"\n#endif\n\n#if DUCKDB_EXTENSION_ICU_LINKED\n#include \"icu_extension.hpp\"\n#endif\n\n#if DUCKDB_EXTENSION_PARQUET_LINKED\n#include \"parquet_extension.hpp\"\n#endif\n\n#if DUCKDB_EXTENSION_TPCH_LINKED\n#include \"tpch_extension.hpp\"\n#endif\n\n#if DUCKDB_EXTENSION_TPCDS_LINKED\n#include \"tpcds_extension.hpp\"\n#endif\n\n#if DUCKDB_EXTENSION_JSON_LINKED\n#include \"json_extension.hpp\"\n#endif\n\n#if DUCKDB_EXTENSION_JEMALLOC_LINKED\n#include \"jemalloc_extension.hpp\"\n#endif\n\n#if DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\n#include \"autocomplete_extension.hpp\"\n#endif\n\n#endif\n\nnamespace duckdb {\n\n//===--------------------------------------------------------------------===//\n// Default Extensions\n//===--------------------------------------------------------------------===//\nstatic const DefaultExtension internal_extensions[] = {\n    {\"core_functions\", \"Core function library\", DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED},\n    {\"icu\", \"Adds support for time zones and collations using the ICU library\", DUCKDB_EXTENSION_ICU_LINKED},\n    {\"excel\", \"Adds support for Excel-like format strings\", DUCKDB_EXTENSION_EXCEL_LINKED},\n    {\"parquet\", \"Adds support for reading and writing parquet files\", DUCKDB_EXTENSION_PARQUET_LINKED},\n    {\"tpch\", \"Adds TPC-H data generation and query support\", DUCKDB_EXTENSION_TPCH_LINKED},\n    {\"tpcds\", \"Adds TPC-DS data generation and query support\", DUCKDB_EXTENSION_TPCDS_LINKED},\n    {\"httpfs\", \"Adds support for reading and writing files over a HTTP(S) connection\", DUCKDB_EXTENSION_HTTPFS_LINKED},\n    {\"json\", \"Adds support for JSON operations\", DUCKDB_EXTENSION_JSON_LINKED},\n    {\"jemalloc\", \"Overwrites system allocator with JEMalloc\", DUCKDB_EXTENSION_JEMALLOC_LINKED},\n    {\"autocomplete\", \"Adds support for autocomplete in the shell\", DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED},\n    {\"motherduck\", \"Enables motherduck integration with the system\", false},\n    {\"mysql_scanner\", \"Adds support for connecting to a MySQL database\", false},\n    {\"sqlite_scanner\", \"Adds support for reading and writing SQLite database files\", false},\n    {\"postgres_scanner\", \"Adds support for connecting to a Postgres database\", false},\n    {\"inet\", \"Adds support for IP-related data types and functions\", false},\n    {\"spatial\", \"Geospatial extension that adds support for working with spatial data and functions\", false},\n    {\"aws\", \"Provides features that depend on the AWS SDK\", false},\n    {\"azure\", \"Adds a filesystem abstraction for Azure blob storage to DuckDB\", false},\n    {\"encodings\", \"All unicode encodings to UTF-8\", false},\n    {\"iceberg\", \"Adds support for Apache Iceberg\", false},\n    {\"vss\", \"Adds indexing support to accelerate Vector Similarity Search\", false},\n    {\"delta\", \"Adds support for Delta Lake\", false},\n    {\"fts\", \"Adds support for Full-Text Search Indexes\", false},\n    {\"ui\", \"Adds local UI for DuckDB\", false},\n    {\"ducklake\", \"Adds support for DuckLake, SQL as a Lakehouse Format\", false},\n    {nullptr, nullptr, false}};\n\nidx_t ExtensionHelper::DefaultExtensionCount() {\n\tidx_t index;\n\tfor (index = 0; internal_extensions[index].name != nullptr; index++) {\n\t}\n\treturn index;\n}\n\nDefaultExtension ExtensionHelper::GetDefaultExtension(idx_t index) {\n\tD_ASSERT(index < DefaultExtensionCount());\n\treturn internal_extensions[index];\n}\n\n//===--------------------------------------------------------------------===//\n// Allow Auto-Install Extensions\n//===--------------------------------------------------------------------===//\nstatic const char *const auto_install[] = {\n    \"motherduck\", \"postgres_scanner\", \"mysql_scanner\", \"sqlite_scanner\", \"delta\", \"iceberg\", \"uc_catalog\",\n    \"ui\",         \"ducklake\",         nullptr};\n\n// TODO: unify with new autoload mechanism\nbool ExtensionHelper::AllowAutoInstall(const string &extension) {\n\tauto extension_name = ApplyExtensionAlias(extension);\n\tfor (idx_t i = 0; auto_install[i]; i++) {\n\t\tif (extension_name == auto_install[i]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool ExtensionHelper::CanAutoloadExtension(const string &ext_name) {\n#ifdef DUCKDB_DISABLE_EXTENSION_LOAD\n\treturn false;\n#endif\n\n\tif (ext_name.empty()) {\n\t\treturn false;\n\t}\n\tfor (const auto &ext : AUTOLOADABLE_EXTENSIONS) {\n\t\tif (ext_name == ext) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nstring ExtensionHelper::AddExtensionInstallHintToErrorMsg(ClientContext &context, const string &base_error,\n                                                          const string &extension_name) {\n\n\treturn AddExtensionInstallHintToErrorMsg(DatabaseInstance::GetDatabase(context), base_error, extension_name);\n}\nstring ExtensionHelper::AddExtensionInstallHintToErrorMsg(DatabaseInstance &db, const string &base_error,\n                                                          const string &extension_name) {\n\tstring install_hint;\n\n\tauto &config = db.config;\n\n\tif (!ExtensionHelper::CanAutoloadExtension(extension_name)) {\n\t\tinstall_hint = \"Please try installing and loading the \" + extension_name + \" extension:\\nINSTALL \" +\n\t\t               extension_name + \";\\nLOAD \" + extension_name + \";\\n\\n\";\n\t} else if (!config.options.autoload_known_extensions) {\n\t\tinstall_hint =\n\t\t    \"Please try installing and loading the \" + extension_name + \" extension by running:\\nINSTALL \" +\n\t\t    extension_name + \";\\nLOAD \" + extension_name +\n\t\t    \";\\n\\nAlternatively, consider enabling auto-install \"\n\t\t    \"and auto-load by running:\\nSET autoinstall_known_extensions=1;\\nSET autoload_known_extensions=1;\";\n\t} else if (!config.options.autoinstall_known_extensions) {\n\t\tinstall_hint =\n\t\t    \"Please try installing the \" + extension_name + \" extension by running:\\nINSTALL \" + extension_name +\n\t\t    \";\\n\\nAlternatively, consider enabling autoinstall by running:\\nSET autoinstall_known_extensions=1;\";\n\t}\n\n\tif (!install_hint.empty()) {\n\t\treturn base_error + \"\\n\\n\" + install_hint;\n\t}\n\n\treturn base_error;\n}\n\nbool ExtensionHelper::TryAutoLoadExtension(ClientContext &context, const string &extension_name) noexcept {\n\tif (context.db->ExtensionIsLoaded(extension_name)) {\n\t\treturn true;\n\t}\n\tauto &dbconfig = DBConfig::GetConfig(context);\n\ttry {\n\t\tif (dbconfig.options.autoinstall_known_extensions) {\n\t\t\tauto &config = DBConfig::GetConfig(context);\n\t\t\tauto autoinstall_repo = ExtensionRepository::GetRepositoryByUrl(\n\t\t\t    StringValue::Get(config.GetSetting<AutoinstallExtensionRepositorySetting>(context)));\n\t\t\tExtensionInstallOptions options;\n\t\t\toptions.repository = autoinstall_repo;\n\t\t\tExtensionHelper::InstallExtension(context, extension_name, options);\n\t\t}\n\t\tExtensionHelper::LoadExternalExtension(context, extension_name);\n\t\treturn true;\n\t} catch (...) {\n\t\treturn false;\n\t}\n}\n\nstatic string GetAutoInstallExtensionsRepository(const DBConfigOptions &options) {\n\tstring repository_url = options.autoinstall_extension_repo;\n\tif (repository_url.empty()) {\n\t\trepository_url = options.custom_extension_repo;\n\t}\n\treturn repository_url;\n}\n\nbool ExtensionHelper::TryAutoLoadExtension(DatabaseInstance &instance, const string &extension_name) noexcept {\n\tif (instance.ExtensionIsLoaded(extension_name)) {\n\t\treturn true;\n\t}\n\tauto &dbconfig = DBConfig::GetConfig(instance);\n\ttry {\n\t\tauto &fs = FileSystem::GetFileSystem(instance);\n\t\tif (dbconfig.options.autoinstall_known_extensions) {\n\t\t\tauto repository_url = GetAutoInstallExtensionsRepository(dbconfig.options);\n\t\t\tauto autoinstall_repo = ExtensionRepository::GetRepositoryByUrl(repository_url);\n\t\t\tExtensionInstallOptions options;\n\t\t\toptions.repository = autoinstall_repo;\n\t\t\tExtensionHelper::InstallExtension(instance, fs, extension_name, options);\n\t\t}\n\t\tExtensionHelper::LoadExternalExtension(instance, fs, extension_name);\n\t\treturn true;\n\t} catch (...) {\n\t\treturn false;\n\t}\n}\n\nstatic ExtensionUpdateResult UpdateExtensionInternal(ClientContext &context, DatabaseInstance &db, FileSystem &fs,\n                                                     const string &full_extension_path, const string &extension_name) {\n\tExtensionUpdateResult result;\n\tresult.extension_name = extension_name;\n\n\tauto &config = DBConfig::GetConfig(db);\n\n\tif (!fs.FileExists(full_extension_path)) {\n\t\tresult.tag = ExtensionUpdateResultTag::NOT_INSTALLED;\n\t\treturn result;\n\t}\n\n\t// Extension exists, check for .info file\n\tconst string info_file_path = full_extension_path + \".info\";\n\tif (!fs.FileExists(info_file_path)) {\n\t\tresult.tag = ExtensionUpdateResultTag::MISSING_INSTALL_INFO;\n\t\treturn result;\n\t}\n\n\t// Parse the version of the extension before updating\n\tauto ext_binary_handle = fs.OpenFile(full_extension_path, FileOpenFlags::FILE_FLAGS_READ);\n\tauto parsed_metadata = ExtensionHelper::ParseExtensionMetaData(*ext_binary_handle);\n\tif (!parsed_metadata.AppearsValid() && !config.options.allow_extensions_metadata_mismatch) {\n\t\tthrow IOException(\n\t\t    \"Failed to update extension: '%s', the metadata of the extension appears invalid! To resolve this, either \"\n\t\t    \"reinstall the extension using 'FORCE INSTALL %s', manually remove the file '%s', or enable '\"\n\t\t    \"SET allow_extensions_metadata_mismatch=true'\",\n\t\t    extension_name, extension_name, full_extension_path);\n\t}\n\n\tresult.prev_version = parsed_metadata.AppearsValid() ? parsed_metadata.extension_version : \"\";\n\n\tauto extension_install_info = ExtensionInstallInfo::TryReadInfoFile(fs, info_file_path, extension_name);\n\n\t// Early out: no info file found\n\tif (extension_install_info->mode == ExtensionInstallMode::UNKNOWN) {\n\t\tresult.tag = ExtensionUpdateResultTag::MISSING_INSTALL_INFO;\n\t\treturn result;\n\t}\n\n\t// Early out: we can only update extensions from repositories\n\tif (extension_install_info->mode != ExtensionInstallMode::REPOSITORY) {\n\t\tresult.tag = ExtensionUpdateResultTag::NOT_A_REPOSITORY;\n\t\tresult.installed_version = result.prev_version;\n\t\treturn result;\n\t}\n\n\tauto repository_from_info = ExtensionRepository::GetRepositoryByUrl(extension_install_info->repository_url);\n\tresult.repository = repository_from_info.ToReadableString();\n\n\t// Force install the full url found in this file, enabling etags to ensure efficient updating\n\tExtensionInstallOptions options;\n\toptions.repository = repository_from_info;\n\toptions.force_install = true;\n\toptions.use_etags = true;\n\n\tunique_ptr<ExtensionInstallInfo> install_result;\n\ttry {\n\t\tinstall_result = ExtensionHelper::InstallExtension(context, extension_name, options);\n\t} catch (std::exception &e) {\n\t\tErrorData error(e);\n\t\terror.Throw(\"Extension updating failed when trying to install '\" + extension_name + \"', original error: \");\n\t}\n\n\tresult.installed_version = install_result->version;\n\n\tif (result.installed_version.empty()) {\n\t\tresult.tag = ExtensionUpdateResultTag::REDOWNLOADED;\n\t} else if (result.installed_version != result.prev_version) {\n\t\tresult.tag = ExtensionUpdateResultTag::UPDATED;\n\t} else {\n\t\tresult.tag = ExtensionUpdateResultTag::NO_UPDATE_AVAILABLE;\n\t}\n\n\treturn result;\n}\n\nvector<ExtensionUpdateResult> ExtensionHelper::UpdateExtensions(ClientContext &context) {\n\tauto &fs = FileSystem::GetFileSystem(context);\n\n\tvector<ExtensionUpdateResult> result;\n\tDatabaseInstance &db = DatabaseInstance::GetDatabase(context);\n\n#ifndef WASM_LOADABLE_EXTENSIONS\n\tcase_insensitive_set_t seen_extensions;\n\n\t// scan the install directory for installed extensions\n\tauto ext_directory = ExtensionHelper::ExtensionDirectory(db, fs);\n\tfs.ListFiles(ext_directory, [&](const string &path, bool is_directory) {\n\t\tif (!StringUtil::EndsWith(path, \".duckdb_extension\")) {\n\t\t\treturn;\n\t\t}\n\n\t\tauto extension_file_name = StringUtil::GetFileName(path);\n\t\tauto extension_name = StringUtil::Split(extension_file_name, \".\")[0];\n\n\t\tseen_extensions.insert(extension_name);\n\n\t\tresult.push_back(UpdateExtensionInternal(context, db, fs, fs.JoinPath(ext_directory, path), extension_name));\n\t});\n#endif\n\n\treturn result;\n}\n\nExtensionUpdateResult ExtensionHelper::UpdateExtension(ClientContext &context, const string &extension_name) {\n\tauto &fs = FileSystem::GetFileSystem(context);\n\tDatabaseInstance &db = DatabaseInstance::GetDatabase(context);\n\tauto ext_directory = ExtensionHelper::ExtensionDirectory(db, fs);\n\n\tauto full_extension_path = fs.JoinPath(ext_directory, extension_name + \".duckdb_extension\");\n\n\tauto update_result = UpdateExtensionInternal(context, db, fs, full_extension_path, extension_name);\n\n\tif (update_result.tag == ExtensionUpdateResultTag::NOT_INSTALLED) {\n\t\tthrow InvalidInputException(\"Failed to update the extension '%s', the extension is not installed!\",\n\t\t                            extension_name);\n\t} else if (update_result.tag == ExtensionUpdateResultTag::UNKNOWN) {\n\t\tthrow InternalException(\"Failed to update extension '%s', an unknown error occurred\", extension_name);\n\t}\n\treturn update_result;\n}\n\nvoid ExtensionHelper::AutoLoadExtension(ClientContext &context, const string &extension_name) {\n\treturn ExtensionHelper::AutoLoadExtension(*context.db, extension_name);\n}\n\nvoid ExtensionHelper::AutoLoadExtension(DatabaseInstance &db, const string &extension_name) {\n\tif (db.ExtensionIsLoaded(extension_name)) {\n\t\t// Avoid downloading again\n\t\treturn;\n\t}\n\tauto &dbconfig = DBConfig::GetConfig(db);\n\ttry {\n\t\tauto fs = FileSystem::CreateLocal();\n#ifndef DUCKDB_WASM\n\t\tif (dbconfig.options.autoinstall_known_extensions) {\n\t\t\tauto repository_url = GetAutoInstallExtensionsRepository(dbconfig.options);\n\t\t\tauto autoinstall_repo = ExtensionRepository::GetRepositoryByUrl(repository_url);\n\t\t\tExtensionInstallOptions options;\n\t\t\toptions.repository = autoinstall_repo;\n\t\t\tExtensionHelper::InstallExtension(db, *fs, extension_name, options);\n\t\t}\n#endif\n\t\tExtensionHelper::LoadExternalExtension(db, *fs, extension_name);\n\t\tDUCKDB_LOG_INFO(db, \"Loaded extension '%s'\", extension_name);\n\t} catch (std::exception &e) {\n\t\tErrorData error(e);\n\t\tthrow AutoloadException(extension_name, error.RawMessage());\n\t}\n}\n\n//===--------------------------------------------------------------------===//\n// Load Statically Compiled Extension\n//===--------------------------------------------------------------------===//\nvoid ExtensionHelper::LoadAllExtensions(DuckDB &db) {\n\t// The in-tree extensions that we check. Non-cmake builds are currently limited to these for static linking\n\t// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds, after that\n\t//\t\t these can be removed\n\tvector<string> extensions {\"parquet\", \"icu\",  \"tpch\",     \"tpcds\",        \"httpfs\",        \"json\",\n\t                           \"excel\",   \"inet\", \"jemalloc\", \"autocomplete\", \"core_functions\"};\n\tfor (auto &ext : extensions) {\n\t\tLoadExtensionInternal(db, ext, true);\n\t}\n\n#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS\n\tfor (const auto &ext : LinkedExtensions()) {\n\t\tLoadExtensionInternal(db, ext, true);\n\t}\n#endif\n}\n\nExtensionLoadResult ExtensionHelper::LoadExtension(DuckDB &db, const std::string &extension) {\n\treturn LoadExtensionInternal(db, extension, false);\n}\n\nExtensionLoadResult ExtensionHelper::LoadExtensionInternal(DuckDB &db, const std::string &extension,\n                                                           bool initial_load) {\n#ifdef DUCKDB_TEST_REMOTE_INSTALL\n\tif (!initial_load && StringUtil::Contains(DUCKDB_TEST_REMOTE_INSTALL, extension)) {\n\t\tConnection con(db);\n\t\tauto result = con.Query(\"INSTALL \" + extension);\n\t\tif (result->HasError()) {\n\t\t\tresult->Print();\n\t\t\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\n\t\t}\n\t\tresult = con.Query(\"LOAD \" + extension);\n\t\tif (result->HasError()) {\n\t\t\tresult->Print();\n\t\t\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\n\t\t}\n\t\treturn ExtensionLoadResult::LOADED_EXTENSION;\n\t}\n#endif\n\n#ifdef DUCKDB_EXTENSIONS_TEST_WITH_LOADABLE\n\t// Note: weird comma's are on purpose to do easy string contains on a list of extension names\n\tif (!initial_load && StringUtil::Contains(DUCKDB_EXTENSIONS_TEST_WITH_LOADABLE, \",\" + extension + \",\")) {\n\t\tConnection con(db);\n\t\tauto result = con.Query((string) \"LOAD '\" + DUCKDB_EXTENSIONS_BUILD_PATH + \"/\" + extension + \"/\" + extension +\n\t\t                        \".duckdb_extension'\");\n\t\tif (result->HasError()) {\n\t\t\tresult->Print();\n\t\t\treturn ExtensionLoadResult::EXTENSION_UNKNOWN;\n\t\t}\n\t\treturn ExtensionLoadResult::LOADED_EXTENSION;\n\t}\n#endif\n\n\t// This is the main extension loading mechanism that loads the extension that are statically linked.\n#if defined(GENERATED_EXTENSION_HEADERS) && GENERATED_EXTENSION_HEADERS\n\tif (TryLoadLinkedExtension(db, extension)) {\n\t\treturn ExtensionLoadResult::LOADED_EXTENSION;\n\t} else {\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n\t}\n#endif\n\n\t// This is the fallback to the \"old\" extension loading mechanism for non-cmake builds\n\t// TODO: rewrite package_build.py to allow also loading out-of-tree extensions in non-cmake builds\n\tif (extension == \"parquet\") {\n#if DUCKDB_EXTENSION_PARQUET_LINKED\n\t\tdb.LoadStaticExtension<ParquetExtension>();\n#else\n\t\t// parquet extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"icu\") {\n#if DUCKDB_EXTENSION_ICU_LINKED\n\t\tdb.LoadStaticExtension<IcuExtension>();\n#else\n\t\t// icu extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"tpch\") {\n#if DUCKDB_EXTENSION_TPCH_LINKED\n\t\tdb.LoadStaticExtension<TpchExtension>();\n#else\n\t\t// icu extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"tpcds\") {\n#if DUCKDB_EXTENSION_TPCDS_LINKED\n\t\tdb.LoadStaticExtension<TpcdsExtension>();\n#else\n\t\t// icu extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"httpfs\") {\n#if DUCKDB_EXTENSION_HTTPFS_LINKED\n\t\tdb.LoadStaticExtension<HttpfsExtension>();\n#else\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"json\") {\n#if DUCKDB_EXTENSION_JSON_LINKED\n\t\tdb.LoadStaticExtension<JsonExtension>();\n#else\n\t\t// json extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"excel\") {\n#if DUCKDB_EXTENSION_EXCEL_LINKED\n\t\tdb.LoadStaticExtension<ExcelExtension>();\n#else\n\t\t// excel extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"jemalloc\") {\n#if DUCKDB_EXTENSION_JEMALLOC_LINKED\n\t\tdb.LoadStaticExtension<JemallocExtension>();\n#else\n\t\t// jemalloc extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"autocomplete\") {\n#if DUCKDB_EXTENSION_AUTOCOMPLETE_LINKED\n\t\tdb.LoadStaticExtension<AutocompleteExtension>();\n#else\n\t\t// autocomplete extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"inet\") {\n#if DUCKDB_EXTENSION_INET_LINKED\n\t\tdb.LoadStaticExtension<InetExtension>();\n#else\n\t\t// inet extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t} else if (extension == \"core_functions\") {\n#if DUCKDB_EXTENSION_CORE_FUNCTIONS_LINKED\n\t\tdb.LoadStaticExtension<CoreFunctionsExtension>();\n#else\n\t\t// core_functions extension required but not build: skip this test\n\t\treturn ExtensionLoadResult::NOT_LOADED;\n#endif\n\t}\n\n\treturn ExtensionLoadResult::LOADED_EXTENSION;\n}\n\nstatic const char *const public_keys[] = {\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6aZuHUa1cLR9YDDYaEfi\nUDbWY8m2t7b71S+k1ZkXfHqu+5drAxm+dIDzdOHOKZSIdwnJbT3sSqwFoG6PlXF3\ng3dsJjax5qESIhbVvf98nyipwNINxoyHCkcCIPkX17QP2xpnT7V59+CqcfDJXLqB\nymjqoFSlaH8dUCHybM4OXlWnAtVHW/nmw0khF8CetcWn4LxaTUHptByaBz8CasSs\ngWpXgSfaHc3R9eArsYhtsVFGyL/DEWgkEHWolxY3Llenhgm/zOf3s7PsAMe7EJX4\nqlSgiXE6OVBXnqd85z4k20lCw/LAOe5hoTMmRWXIj74MudWe2U91J6GrrGEZa7zT\n7QIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq8Gg1S/LI6ApMAYsFc9m\nPrkFIY+nc0LXSpxm77twU8D5M0Xkz/Av4f88DQmj1OE3164bEtR7sl7xDPZojFHj\nYYyucJxEI97l5OU1d3Pc1BdKXL4+mnW5FlUGj218u8qD+G1hrkySXQkrUzIjPPNw\no6knF3G/xqQF+KI+tc7ajnTni8CAlnUSxfnstycqbVS86m238PLASVPK9/SmIRgO\nXCEV+ZNMlerq8EwsW4cJPHH0oNVMcaG+QT4z79roW1rbJghn9ubAVdQU6VLUAikI\nb8keUyY+D0XdY9DpDBeiorb1qPYt8BPLOAQrIUAw1CgpMM9KFp9TNvW47KcG4bcB\ndQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyYATA9KOQ0Azf97QAPfY\nJc/WeZyE4E1qlRgKWKqNtYSXZqk5At0V7w2ntAWtYSpczFrVepCJ0oPMDpZTigEr\nNgOgfo5LEhPx5XmtCf62xY/xL3kgtfz9Mm5TBkuQy4KwY4z1npGr4NYYDXtF7kkf\nLQE+FnD8Yr4E0wHBib7ey7aeeKWmwqvUjzDqG+TzaqwzO/RCUsSctqSS0t1oo2hv\n4q1ofanUXsV8MXk/ujtgxu7WkVvfiSpK1zRazgeZjcrQFO9qL/pla0vBUxa1U8He\nGMLnL0oRfcMg7yKrbIMrvlEl2ZmiR9im44dXJWfY42quObwr1PuEkEoCMcMisSWl\njwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4RvbWx3zLblDHH/lGUF5\nQ512MT+v3YPriuibROMllv8WiCLAMeJ0QXbVaIzBOeHDeLx8yvoZZN+TENKxtT6u\nIfMMneUzxHBqy0AQNfIsSsOnG5nqoeE/AwbS6VqCdH1aLfoCoPffacHYa0XvTcsi\naVlZfr+UzJS+ty8pRmFVi1UKSOADDdK8XfIovJl/zMP2TxYX2Y3fnjeLtl8Sqs2e\nP+eHDoy7Wi4EPTyY7tNTCfxwKNHn1HQ5yrv5dgvMxFWIWXGz24yikFvtwLGHe8uJ\nWi+fBX+0PF0diZ6pIthZ149VU8qCqYAXjgpxZ0EZdrsiF6Ewz0cfg20SYApFcmW4\npwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyhd5AfwrUohG3O4DE0K9\nO3FmgB7zE4aDnkL8UUfGCh5kdP8q7ewMjekY+c6LwWOmpdJpSwqhfV1q5ZU1l6rk\n3hlt03LO3sgs28kcfOVH15hqfxts6Sg5KcRjxStE50ORmXGwXDcS9vqkJ60J1EHA\nlcZqbCRSO73ZPLhdepfd0/C6tM0L7Ge6cAE62/MTmYNGv8fDzwQr/kYIJMdoS8Zp\nthRpctFZJtPs3b0fffZA/TCLVKMvEVgTWs48751qKid7N/Lm/iEGx/tOf4o23Nec\nPz1IQaGLP+UOLVQbqQBHJWNOqigm7kWhDgs3N4YagWgxPEQ0WVLtFji/ZjlKZc7h\ndwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnFDg3LhyV6BVE2Z3zQvN\n6urrKvPhygTa5+wIPGwYTzJ8DfGALqlsX3VOXMvcJTca6SbuwwkoXHuSU5wQxfcs\nbt4jTXD3NIoRwQPl+D9IbgIMuX0ACl27rJmr/f9zkY7qui4k1X82pQkxBe+/qJ4r\nTBwVNONVx1fekTMnSCEhwg5yU3TNbkObu0qlQeJfuMWLDQbW/8v/qfr/Nz0JqHDN\nyYKfKvFMlORxyJYiOyeOsbzNGEhkGQGOmKhRUhS35kD+oA0jqwPwMCM9O4kFg/L8\niZbpBBX2By1K3msejWMRAewTOyPas6YMQOYq9BMmWQqzVtG5xcaSJwN/YnMpJyqb\nsQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1z0RU8vGrfEkrscEoZKA\nGiOcGh2EMcKwjQpl4nKuR9H4o/dg+CZregVSHg7MP2f8mhLZZyoFev49oWOV4Rmi\nqs99UNxm7DyKW1fF1ovowsUW5lsDoKYLvpuzHo0s4laiV4AnIYP7tHGLdzsnK2Os\nCp5dSuMwKHPZ9N25hXxFB/dRrAdIiXHvbSqr4N29XzfQloQpL3bGHLKY6guFHluH\nX5dJ9eirVakWWou7BR2rnD0k9vER6oRdVnJ6YKb5uhWEOQ3NmV961oyr+uiDTcep\nqqtGHWuFhENixtiWGjFJJcACwqxEAW3bz9lyrfnPDsHSW/rlQVDIAkik+fOp+R7L\nkQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxwO27e1vnbNcpiDg7Wwx\nK/w5aEGukXotu3529ieq+O39H0+Bak4vIbzGhDUh3/ElmxaFMAs4PYrWe/hc2WFD\nH4JCOoFIn4y9gQeE855DGGFgeIVd1BnSs5S+5wUEMxLNyHdHSmINN6FsoZ535iUg\nKdYjRh1iZevezg7ln8o/O36uthu925ehFBXSy6jLJgQlwmq0KxZJE0OAZhuDBM60\nMtIunNa/e5y+Gw3GknFwtRLmn/nEckZx1nEtepYvvUa7UGy+8KuGuhOerCZTutbG\nk8liCVgGenRve8unA2LrBbpL+AUf3CrZU/uAxxTqWmw6Z/S6TeW5ozeeyOCh8ii6\nTwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsGIFOfIQ4RI5qu4klOxf\nge6eXwBMAkuTXyhyIIJDtE8CurnwQvUXVlt+Kf0SfuIFW6MY5ErcWE/vMFbc81IR\n9wByOAAV2CTyiLGZT63uE8pN6FSHd6yGYCLjXd3P3cnP3Qj5pBncpLuAUDfHG4wP\nbs9jIADw3HysD+eCNja8p7ZC7CzWxTcO7HsEu9deAAU19YywdpagXvQ0pJ9zV5qU\njrHxBygl31t6TmmX+3d+azjGu9Hu36E+5wcSOOhuwAFXDejb40Ixv53ItJ3fZzzH\nPF2nj9sQvQ8c5ptjyOvQCBRdqkEWXIVHClxqWb+o59pDIh1G0UGcmiDN7K9Gz5HA\nZQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt9uUnlW/CoUXT68yaZh9\nSeXHzGRCPNEI98Tara+dgYxDX1z7nfOh8o15liT0QsAzx34EewZOxcKCNiV/dZX5\nz4clCkD8uUbZut6IVx8Eu+7Qcd5jZthRc6hQrN9Ltv7ZQEh7KGXOHa53kT2K01ws\n4jbVmd/7Nx7y0Yyqhja01pIu/CUaTkODfQxBXwriLdIzp7y/iJeF/TLqCwZWHKQx\nQOZnsPEveB1F00Va9MeAtTlXFUJ/TQXquqTjeLj4HuIRtbyuNgWoc0JyF+mcafAl\nbnrNEBIfxZhAT81aUCIAzRJp6AqfdeZxnZ/WwohtZQZLXAxFQPTWCcP+Z9M7OIQL\nWwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA56NhfACkeCyZM07l2wmd\niTp24E2tLLKU3iByKlIRWRAvXsOejRMJTHTNHWa3cQ7uLP++Tf2St7ksNsyPMNZy\n9QRTLNCYr9rN9loLwdb2sMWxFBwwzCaAOTahGI7GJQy30UB7FEND0X/5U2rZvQij\nQ6K+O4aa+K9M5qyOHNMmXywmTnAgWKNaNxQHPRtD2+dSj60T6zXdtIuCrPfcNGg5\ngj07qWGEXX83V/L7nSqCiIVYg/wqds1x52Yjk1nhXYNBTqlnhmOd8LynGxz/sXC7\nh2Q9XsHjXIChW4FHyLIOl6b4zPMBSxzCigYm3QZJWfAkZv5PBRtnq7vhYOLHzLQj\nCwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmfPLe0IWGYC0MZC6YiM3\nQGfhT6zSKB0I2DW44nlBlWUcF+32jW2bFJtgE76qGGKFeU4kJBWYr99ufHoAodNg\nM1Ehl/JfQ5KmbC1WIqnFTrgbmqJde79jeCvCpbFLuqnzidwO1PbXDbfRFQcgWaXT\nmDVLNNVmLxA0GkCv+kydE2gtcOD9BDceg7F/56TDvclyI5QqAnjE2XIRMPZlXQP4\noF2kgz4Cn7LxLHYmkU2sS9NYLzHoyUqFplWlxkQjA4eQ0neutV1Ydmc1IX8W7R38\nA7nFtaT8iI8w6Vkv7ijYN6xf5cVBPKZ3Dv7AdwPet86JD5mf5v+r7iwg5xl3r77Z\niwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoB1kWsX8YmCcFOD9ilBY\nxK076HmUAN026uJ8JpmU9Hz+QT1FNXOsnj1h2G6U6btYVIdHUTHy/BvAumrDKqRz\nqcEAzCuhxUjPjss54a/Zqu6nQcoIPHuG/Er39oZHIVkPR1WCvWj8wmyYv6T//dPH\nunO6tW29sXXxS+J1Gah6vpbtJw1pI/liah1DZzb13KWPDI6ZzviTNnW4S05r6js/\n30He+Yud6aywrdaP/7G90qcrteEFcjFy4Xf+5vG960oKoGoDplwX5poay1oCP9tb\ng8AC8VSRAGi3oviTeSWZcrLXS8AtJhGvF48cXQj2q+8YeVKVDpH6fPQxJ9Sh9aeU\nawIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4NTMAIYIlCMID00ufy/I\nAZXc8pocDx9N1Q5x5/cL3aIpLmx02AKo9BvTJaJuHiTjlwYhPtlhIrHV4HUVTkOX\nsISp8B8v9i2I1RIvCTAcvy3gcH6rdRWZ0cdTUiMEqnnxBX9zdzl8oMzZcyauv19D\nBeqJvzflIT96b8g8K3mvgJHs9a1j9f0gN8FuTA0c52DouKnrh8UwH7mlrumYerJw\n6goJGQuK1HEOt6bcQuvogkbgJWOoEYwjNrPwQvIcP4wyrgSnOHg1yXOFE84oVynJ\nczQEOz9ke42I3h8wrnQxilEYBVo2uX8MenqTyfGnE32lPRt3Wv1iEVQls8Cxiuy2\nCQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3bUtfp66OtRyvIF/oucn\nid8mo7gvbNEH04QMLO3Ok43dlWgWI3hekJAqOYc0mvoI5anqr98h8FI7aCYZm/bY\nvpz0I1aXBaEPh3aWh8f/w9HME7ykBvmhMe3J+VFGWWL4eswfRl//GCtnSMBzDFhM\nSaQOTvADWHkC0njeI5yXjf/lNm6fMACP1cnhuvCtnx7VP/DAtvUk9usDKG56MJnZ\nUoVM3HHjbJeRwxCdlSWe12ilCdwMRKSDY92Hk38/zBLenH04C3HRQLjBGewACUmx\nuvNInehZ4kSYFGa+7UxBxFtzJhlKzGR73qUjpWzZivCe1K0WfRVP5IWsKNCCESJ/\nnQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyV2dE/CRUAUE8ybq/DoS\nLc7QlYXh04K+McbhN724TbHahLTuDk5mR5TAunA8Nea4euRzknKdMFAz1eh9gyy3\n5x4UfXQW1fIZqNo6WNrGxYJgWAXU+pov+OvxsMQWzqS4jrTHDHbblCCLKp1akwJk\naFNyqgjAL373PcqXC+XAn8vHx4xHFoFP5lq4lLcJCOW5ee9v9El3w0USLwS+t1cF\nRY3kuV6Njlr4zsRH9iM6/zaSuCALYWJ/JrPEurSJXzFZnWsvn6aQdeNeAn08+z0F\nk2NwaauEo0xmLqzqTRGzjHqKKmeefN3/+M/FN2FrApDlxWQfhD2Y3USdAiN547Nj\n1wIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvm2+kTrEQWZXuxhWzBdl\nPCbQGqbrukbeS6JKSlQLJDC8ayZIxFxatqg1Q8UPyv89MVRsHOGlG1OqFaOEtPjQ\nOo6j/moFwB4GPyJhJHOGpCKa4CLB5clhfDCLJw6ty7PcDU3T6yW4X4Qc5k4LRRWy\nyzC8lVHfBdarN+1iEe0ALMOGoeiJjVn6i/AFxktRwgd8njqv/oWQyfjJZXkNMsb6\n7ZDxNVAUrp/WXpE4Kq694bB9xa/pWsqv7FjQJUgTnEzvbN+qXnVPtA7dHcOYYJ8Z\nSbrJUfHrf8TS5B54AiopFpWG+hIbjqqdigqabBqFpmjiRDZgDy4zJJj52xJZMnrp\nrwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwEAcVmY3589O02pLA22f\nMlarLyJUgy0BeJDG5AUsi17ct8sHZzRiv9zKQVCBk1CtZY//jyqnrM7iCBLWsyby\nTiTOtGYHHApaLnNjjtaHdQ6zplhbc3g2XLy+4ab8GNKG3zc8iXpsQM6r+JO5n9pm\nV9vollz9dkFxS9l+1P17lZdIgCh9O3EIFJv5QCd5c9l2ezHAan2OhkWhiDtldnH/\nMfRXbz7X5sqlwWLa/jhPtvY45x7dZaCHGqNzbupQZs0vHnAVdDu3vAWDmT/3sXHG\nvmGxswKA9tPU0prSvQWLz4LUCnGi/cC5R+fiu+fovFM/BwvaGtqBFIF/1oWVq7bZ\n4wIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA25qGwNO1+qHygC8mjm8L\n3I66mV/IzslgBDHC91mE8YcI5Fq0sdrtsbUhK3z89wIN/zOhbHX0NEiXm2GxUnsI\nvb5tDZXAh7AbTnXTMVbxO/e/8sPLUiObGjDvjVzyzrxOeG87yK/oIiilwk9wTsIb\nwMn2Grj4ht9gVKx3oGHYV7STNdWBlzSaJj4Ou7+5M1InjPDRFZG1K31D2d3IHByX\nlmcRPZtPFTa5C1uVJw00fI4F4uEFlPclZQlR5yA0G9v+0uDgLcjIUB4eqwMthUWc\ndHhlmrPp04LI19eksWHCtG30RzmUaxDiIC7J2Ut0zHDqUe7aXn8tOVI7dE9tTKQD\nKQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7EC2bx7aRnf3TcRg5gmw\nQOKNCUheCelK8hoXLMsKSJqmufyJ+IHUejpXGOpvyYRbACiJ5GiNcww20MVpTBU7\nYESWB2QSU2eEJJXMq84qsZSO8WGmAuKpUckI+hNHKQYJBEDOougV6/vVVEm5c5bc\nSLWQo0+/ciQ21Zwz5SwimX8ep1YpqYirO04gcyGZzAfGboXRvdUwA+1bZvuUXdKC\n4zsCw2QALlcVpzPwjB5mqA/3a+SPgdLAiLOwWXFDRMnQw44UjsnPJFoXgEZiUpZm\nEMS5gLv50CzQqJXK9mNzPuYXNUIc4Pw4ssVWe0OfN3Od90gl5uFUwk/G9lWSYnBN\n3wIDAQAB\n-----END PUBLIC KEY-----\n)\", nullptr};\n\nstatic const char *const community_public_keys[] = {\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtXl28loGwAH3ZGQXXgJQ\n3omhIEiUb3z9Petjl+jmdtEQnMNUFEZiXkfJB02UFWBL1OoKKnjiGhcr5oGiIZKR\nCoaL6SfmWe//7o8STM44stE0exzZcv8W4tWwjrzSWQnwh2JgSnHN64xoDQjdvG3X\n9uQ1xXMXghWOKqEpgArpJQkHoPW3CD5sCS2NLFrBG6KgX0W+GTV5HaKhTMr2754F\nl260drcBJZhLFCeesze2DXtQC+R9D25Zwn2ehHHd2Fd1M10ZL/iKN8NeerB4Jnph\nw6E3orA0DusDLDLtpJUHhmpLoU/1eYQFQOpGw2ce5I88Tkx7SKnCRy1UiE7BA82W\nYQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvTgQ+mJs8vG/TQTJ6sV+\ntACTZTbmp8NkgTuwEyHZSNhX6W8FYwAqPzbePo7wudsUdBWV8j+kUYaBiqeiPUp0\n7neO/3oTUQkMJLq9FeIXfoYkS3+/5CIuvsfas6PJP9U2ge6MV1Ndgbd7a12cmX8V\n4eNwQRDv/H4zgL7YI2ZZSG1loxgMffZrpflNB87t/f0QYdmnwphMC5RqxiCkDZPA\na5/5KbmD6kjLh8RRRw3lAZbPQe5r7o2Xqqwg9gc6rQ/WFBB1Oj+Q5Bggqznl6dCB\nJcLOA7rhYatv/mvt1h6ogQwQ9FGRM3PifV9boZxOQGBAkMD6ngpd5kVoOxdygC7v\ntwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7KvnA+Ixj4ZCLR+aXSFz\nICGbQdVrZ/hhjImDQcWgWY+z/bEbybslDvy5KEPrxTNxKZ0VfFFAVEUj2cw8B5KI\nnaK8U2VIpdD6LpEJvkOuWKg3bym4COhyAcRNqKKu/GPzS90wICJ2aaayF1mVoCIL\ndsp2ZShSIVRJa55gVvfRN1ZEkqBnZryKNt/h3DNqqq2Sn3n3HIZ8H9oEO+L+2Efe\nkyET7o9OHy6QZXhf4SJ8QlQAwxxe/L4bln8CBlBHKrUNNqxpjhC37EnY2jpuu3a9\nEZcNFj8R4qIJx7hcltntZyKrEIXqc6I6x4oZ4qhZj3RQ5Lr+pJ++idoc1LmBS3k5\nyQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7SF+5RZ9jXyruBkhxhk2\nBSWPbohevxxv++7Uw0HXC/3Xw4jzii0tYaJ6O8QWXyggEAkvmONblAN1rfiz+h5M\noJUQwHjTTZ8BmKUmWrNayVokUXLu4IpCAHk4uSXfx4U/AINnNfWW7z8mUJf6nGsM\nXePuKPBRUsw+JmTWOXEIVrkc/66B+gpgi+DwRFLUPh96D8XRAhp7QbHE9UMD3HpA\nmPMX7ICVsVS+NGdCHNsdWfH4noaESjgmMdApKekgeeo8Zu1pvQ3y8iew1xOQVBoR\nV+PCGWAJYB7ulqBBkRz+NhPLWw7wRA4yLNcZVlZuDFxH9EoavWdfIyYYUn4efSz9\ntQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAszmZ6Slv/oJvFpOLtSMx\n58AKMia9y+qcVfw77/Alb3b+Qi5L2uy6nHfJElT7RIeeXhJ8mFglZ70MecTfj0jl\n5WhW+yMg6jmPCJL2JMt/oeC4iY4Cf/3C9RHU4IO13VN4dnVQ5S+SEEmSbXnno9Pe\n06yyVgZeJ0REJMV1JZj9gOPc/wbeLHsx4UC5qsu32Ammy6J7tS+k7JvRc9CPOEpe\nIhWoZmpONydcI6IRfyH2xl4uLY3hWDrRei0I2zGH45G2hPNeTtRh27t+SzXO7h9j\ny072CgHytRgQBiH711i8fe4bHMmtVPhPjFrbuzbJSgE7SyikrWIHMDsnPz443bdR\ncQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAleywAb7xZKYTFE08gGA9\nffTeYPRcECl/J060fUziIiFu0NHTOZO+a4BH2X+E1WjjNNQkbn00g+op4nqg3/U+\nUaKuXNjWY2Rvd8s91fUD0YOdRpPmsTm2QqhgmYYzO8Oh3YXBNRpXaqALbjL9Nahw\nYEAsI3o5yenZGUIEk3JaZFHsAZPL5wGgDVpZgmVUHJ0EO8N5LQh01aHxnP5+ey2z\nL5h6IdWLubb07wEBk5bnmIvdhd6dIBzUql27BAqvxKJbW0/okjrhIgcIANDCavfV\nL8UP7MCGnfozK7VIl5DG85gCQVAD8+lGUDzOuhzZjl7XKpkFAIWaS8pl4AJbJuG8\nnwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxiKgcR7Kb1CGTNczbuX+\nS7OFpnVLDD5XGVKvYWxL+2By2QRFPWtMs8c24omLIgZ/CWBFPraMiNKS4+V9ar2C\nwJhToJnAOKyayA0Gw2wNZx1mgHAZ/5mT+ImfkmZu2HPwtzJmJDQlESD4p40BWBNa\nZpWFGPMKn4GqvOOSGevC/r9inXm6NaPkM+B/piVDEgiJ7g/kpoqImmNb/c2/3XG5\n3kbDIHdbd2m3A3jWCjNGSANKsR5C0/rZtvsA8tjDlNWIuKmkU3C2nfj3UduU4dNP\nCisod/pDY8ov0U9sdkM9XZsTXjtbAIGLzMshmOv4ajRFUueGnsZW0GRqp9DSnKmj\n2QIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuh334hUmJcdDJUSmeXqE\nGUfGnASD2QrnuoS+gsXgW5BQW8YMDFASvADQhoDUdcwZMlAF+p+CxKCX/gBp40nC\n5eyPXv1e0K6PFcCdHtJq8MhGYAr1sy+7cOpzv0r9whobYUykGoHjdwZeu3VbA3uz\ngo80oYQlwY+v4zZFafCz3cXw8u7n/9PlddgeqHuIPsNZLocICuBUxwg5rHTzycg2\nPa68CRselONGN12V0/wlOg+NZpKCym58CM9SS/0v4YZ6LnmINo8gdRYnGE2zhvey\npHR8IJ8WSJXbl8NwyIY1AmtT/Z0dbAclfD8Wt/w5KA/sttnQzrB7fPsLRyLP1Alq\niQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvWuRMEbez/Ud2o/0KA04\nK9u3HePWud9rEqMsPv2HlclH3k+cezoUJzVre0lopv3R4aG3LDoFETrgGgUVrfPG\nz3Zh7vyk0kb4IGkv+kLQu/cWQXyNzigxV+WQnpIWQ28vrP45y5f+GhwwgzFaDAQR\nu1o1HH1FEnP7SSzHVvisNTecY95+F5AOvtOOUg4VlegXdUeGZHEza/0D9V8gODPL\nDzbOJDDiqX8ahhRnIZyGEg6y7QqftZFz7j0siCHTXXYJBOcPjD4TqTUNpGvBox44\nwgLlLcDsZ/n2Ck4doLXxVz9F80VKOriHSk+qIwseykKVzWQDQTOMOsjCmQsDvram\nRwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyJmGd1GuBv/WD80IcVyr\ndZcmuYe/7azLuV1wsgtH4gsUx+ifUwLZUhLFGOTAPFitbFYPPdhQKncO+BcbvOIo\n9FGKj9jGVpMU6C+0JQfi+koESevtO1tYzG8c2dMOGNUO0Hlj2Hezm3tZY4nAbo1J\nDYqQSY7qvOYZPFvOS/zL+q2vMx93w9jDHJK4iU02ovAqK9xCWfTp4W7rtbDeTgiX\nW/75rMG8DWI1ZHA2JXAOFPsiOHa0/yyvCvUIWvRuNHqTTN5NFiJRIcbTCKKbNwNM\nxcNkBQCx4xwOqD9TkDbHpBOC/pfW7j3ygJdYRjFFqm10+KwPACYo/f0n4n4DI8Zz\ntwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnmxbunsK+2pL8Cva9F8E\n9o/dQ35TuIqcgpl9/oIc++x+6G5/8UT5mgGCQTITJRIAPnHsZ9XEnMxTAuSCDkYG\nCA3JMl1MT7Zxu8TQJBPiXxOaAE1UmA13JuQ2Uu0v7T6TucQxR9KMvcdCxOZ5cBU4\nuyJObnZVy/WjM2vWcWDUaYGfMss3eYxcDpavspBANdtSZfv11+8/VC+gEGBOe+oW\nzDR+BlQx//MAzwSP5HVQcmLHsT073IvkoUWJUxSCCwlLe60ylpY16BLT6dB0RU8B\nsxFcIwmYg0kq19EEPPvZLvRKjG/TJRm1MFzOE5LP2VxLGdMltWYEVsBZHTcWU7HR\n8wIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlo7eDZOpCptanajUtDK3\nq8Q/ykxmDDw6lVSiLBm54zwMxaqfM+tV/xqalvIVv3BrucRkCs6H+R0bpd7XhbE5\na7ZFSrWCBf1V6y/NZrEn4qcRbk/WsG4UFqu7CG4r+EgQ4nmoIH/A5+e8FUcur3Y8\n2ie9Foi1CUpZojWYZJeHKbb2yYn4MFHszEb5w9HVxY+i9jR1B8Rvn6OEK3OYDrtA\nKnPXp4OiDx6CviYEmipX815PPj7Sv8KKL96JqGWjC4kYw6ALgV/GxiX++tv6rh2O\npaW9MBv1y+5oZ8ls5S2T/LXbxDpjUEKC9guSSWmsPHRMxOumXsw0H43grC3Ce8Ui\nCwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ACgf0kJeQgDh+vHj2aj\nK/6FQ794MknLxlwTARGlktoVwZgW/qc6vMZsILRUP1gb/gPXdpSTqqad/GLG4f5R\n1Ji1It6BniJOPWu1YyTz0C/BXzTGWbwPnIaawbpQE8n4A+tjGGvAoauPtzr0bWfV\nXOXPfIW9XB51dcaVTZgHN55Y8Yd/Pcu9/lqXqXyE23tDLXR/QgGpwK9VxTSbRmuC\nWspwqWY6L3MIw+3HIXERTM1uNhc9oHxMOCRbJmUghG0wCWB0ed3Xhbnl9mHlX+l1\nrfCJAP4lVWKFjkKBNUejaf+WHxASMjrQubgHLZ2fpf3Ra8TfI3rgPABsAqEIFw3T\nQwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt635/P50bMbEDTapjAQz\nARTb3y8jMHxVruX0tJU1tycmkX3J8tBALmc6TkSHNTJcQmR8L8Sj3h76l/vuL373\nHFSGZ4xghBQqR1lUd2kVomoh+rzEte+0rHWm0JMhjmTQBx+AkDCOw4z3vi5AxWx0\n4EbYpQm2akVGKXQrQPyds0UirmdLACCH6WM6exgAXr75DB4PUpG85oI9Q+5ee1Km\n+4atVJ4FNa6ZnjWccrlMYT0W7a0Y7feJPAPvfizrs2MG9/ijyBX34eCWA5dtUSIm\n2uqI6DxITZlLTvXVDSKQGlq5TEGMvRULWTatqWy4g+tOZ8rSbRuj32pcBnXlwuVu\n7QIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwqO3yWSLKqz1uQ54iFd/\nVcQzgT6chLVuhktt7EFvi3tKaQqz2h2KPkDR+MssRV/BZ/41GNlR6r6p5CaPVDDe\nCuj5IcxrIFZIOBMBi1YZ/bknF9edJacINxNfGK/lXBNEAdUvxcOxX8WeP69uvl2l\nSKyO3yAdx6HOyL9if95bYQD19HYPZzbfccPX1aD4pjnej6uMfd7yZErH7i8y0oj4\neSKSe1CisjFlR9NzRGO42jU9rtqnAFH9sK5wU9xKQ7bQwlz7yKBF2RuuQweMpXb6\nlSObI7ZqYN+7jkf9F5hKRx4kX3+MMBeYmFOy1aYZ08u6sdJ2ua/hFNSDRg7e/UCe\nAwIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkJihnfMECaa6YCg6avam\ncb8Sy1GshJ7c7+EW6C4vnspSSvEi04AEBB29pnEF9+VO6VSUHLxunVCpbmKFaLH+\n5fDLnc/wCkjPQww49da9MEScCmVGjROlmog65cxQbv4lfxyw55sFV3s/5CPcGlVc\n1gojHRABrx4YocpeYies04mEVoOYg1DBG4Uf+aFd5+hm3ZtBa4mqTK2iQa4ILkHa\na0/Us1drRuDjjI4zSbgRzy9x0JVDvqDdLubHyaEf7d7SdrKzodhydG84qpsPFxIj\nLK7Bu5v7P4ZTJmxMG3PBM2kB//hlYVR4vO4VEu66mQIM6km+vT9cwxz77qIJhLn3\nywIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9NbP7ijUxZh4j0NVF6yO\nIZ0rzROwl4pP4HGeN+Woyi9+qpdE874WlVoquGEpsshF4Ojzbu2BtXuihb783awa\nGLx66MYPeID1FjTKmuCJ2aluOP+DkVo6K1EoqVJXyeIxZzVSqhSIuAdb/vmPlgLz\nFzdk3FgNNOERuGV363DRGz1YxZVnJeSs76g+/9ddhMk8cqIRup5S4YgTOSr0vKem\n1E6lyE8IbLoq9J7w5Ur8VjzE2cI+eLKGFqr46Q8pf0pJq72gd+Z3mH5D2LmvEtAR\n9jAQXVlLfHauQR2M0K6mqDy9GxL19OU4tGO+GY86VvDTU+wZppAZRz9AKoL1fwfI\nBQIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjrI16GdC2zJriLbyzcre\nAqvckBSTMd4bdGaodUBNBTBVbITsOw/k7D62y2hSZHt2nHOyEVkJINJHADrpNZuY\nybS4ssEXxD8+NnjATqQxDMuSz8lUj/Jnf49uzLh84fep3DTksDcQX6Nvio5q8Xbh\nHRgvl5I+tPfLtme0oW9cVuVja2i5lHB3SzYCW9Kk/V4/d2WiceYf91a1Nae6m7QV\n5bmbYoHmsxT8refTQq+5lAhzVXYU9QRgiKdbE8sSmkV+YiZEtGijefUXgmOxx3I9\nB3y03796WBS/RHpSzdMNJw/xPWJcSEMqaUdSYr0DuPCnrn7ojFeF/EFC47CBq5DU\nswIDAQAB\n-----END PUBLIC KEY-----\n)\",\n    R\"(\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjS1+My6OhQCCD1DgrzKu\ndb4Fvc3aqqEhQyjqMLnalp0uoGFpSLoPsZiPGloTE8FSs1ZBFKQ8h2SsGwSdhRKF\nxIqoOnS0B/ORjGJxTj7Q2YWjzkCZUD4Ul2AxIbv3TmZM2LeyHJL3A71tSuck8EQY\nPE2aj1tLzXsSfRaByy5xwXiU6UpnwCY1xb8tK8QxavRCo5T9Si9tNsolStoNVXV0\nk9EbTcRNnxCvab/oqjvgyRuSmIES00v8jZOGQZQUpw02RN6yCBeX2i8GPsGjj/T9\n6Gu1Z3G4zUjLlJxl8vjo8KIDaQ8NVWT0j7gx9Knvb5tWnAORI1aJA8AHQvaoOT1W\n1wIDAQAB\n-----END PUBLIC KEY-----\n)\", nullptr};\n\nconst vector<string> ExtensionHelper::GetPublicKeys(bool allow_community_extensions) {\n\tvector<string> keys;\n\tfor (idx_t i = 0; public_keys[i]; i++) {\n\t\tkeys.emplace_back(public_keys[i]);\n\t}\n\tif (allow_community_extensions) {\n\t\tfor (idx_t i = 0; community_public_keys[i]; i++) {\n\t\t\tkeys.emplace_back(community_public_keys[i]);\n\t\t}\n\t}\n\treturn keys;\n}\n\n} // namespace duckdb\n","uri":"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp","version":1}}}},{"pid":0,"ph":"X","name":"Queued:DocumentSymbols","ts":35664.175000000003,"tid":55670,"dur":1.0559999999968568,"args":{"CurrentRequest":"Update","PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":35643.464999999997,"tid":55670,"id":2,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":130703.99800000001,"tid":55686,"bp":"e","id":2,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":130705.817,"tid":55686,"dur":5.1889999999984866,"args":{"path":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":130716.057,"tid":55686,"args":{"Message":"ASTWorker running DocumentSymbols on version 1 of /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":130766.505,"tid":55686,"args":{"Message":"--> reply:textDocument/documentSymbol(1) 95 ms"}},{"pid":0,"ph":"i","name":"Log","ts":130836.35000000001,"tid":55686,"args":{"Message":">>> {\"id\":1,\"jsonrpc\":\"2.0\",\"result\":[{\"children\":[{\"detail\":\"const int[]\",\"kind\":13,\"name\":\"internal_extensions\",\"range\":{\"end\":{\"character\":51,\"line\":100},\"start\":{\"character\":0,\"line\":100}},\"selectionRange\":{\"end\":{\"character\":49,\"line\":100},\"start\":{\"character\":30,\"line\":100}}},{\"detail\":\"const char *const[10]\",\"kind\":13,\"name\":\"auto_install\",\"range\":{\"end\":{\"character\":46,\"line\":145},\"start\":{\"character\":0,\"line\":143}},\"selectionRange\":{\"end\":{\"character\":37,\"line\":143},\"start\":{\"character\":25,\"line\":143}}},{\"detail\":\"int (const int &)\",\"kind\":12,\"name\":\"GetAutoInstallExtensionsRepository\",\"range\":{\"end\":{\"character\":1,\"line\":234},\"start\":{\"character\":0,\"line\":228}},\"selectionRange\":{\"end\":{\"character\":48,\"line\":228},\"start\":{\"character\":14,\"line\":228}}},{\"detail\":\"int (int &, int &, int &, const int &, const int &)\",\"kind\":12,\"name\":\"UpdateExtensionInternal\",\"range\":{\"end\":{\"character\":1,\"line\":332},\"start\":{\"character\":0,\"line\":257}},\"selectionRange\":{\"end\":{\"character\":52,\"line\":257},\"start\":{\"character\":29,\"line\":257}}},{\"detail\":\"const char *const[21]\",\"kind\":13,\"name\":\"public_keys\",\"range\":{\"end\":{\"character\":12,\"line\":778},\"start\":{\"character\":0,\"line\":558}},\"selectionRange\":{\"end\":{\"character\":36,\"line\":558},\"start\":{\"character\":25,\"line\":558}}},{\"detail\":\"const char *const[20]\",\"kind\":13,\"name\":\"community_public_keys\",\"range\":{\"end\":{\"character\":12,\"line\":989},\"start\":{\"character\":0,\"line\":780}},\"selectionRange\":{\"end\":{\"character\":46,\"line\":780},\"start\":{\"character\":25,\"line\":780}}}],\"kind\":3,\"name\":\"duckdb\",\"range\":{\"end\":{\"character\":1,\"line\":1004},\"start\":{\"character\":0,\"line\":95}},\"selectionRange\":{\"end\":{\"character\":16,\"line\":95},\"start\":{\"character\":10,\"line\":95}}}]}\n"}},{"pid":0,"ph":"X","name":"DocumentSymbols","ts":130701.50999999999,"tid":55686,"dur":147.01800000001094,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentSymbol","ts":35643.464999999997,"tid":55670,"dur":22.749000000003434,"args":{"Params":{"textDocument":{"uri":"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},"Reply":[{"children":[{"detail":"const int[]","kind":13,"name":"internal_extensions","range":{"end":{"character":51,"line":100},"start":{"character":0,"line":100}},"selectionRange":{"end":{"character":49,"line":100},"start":{"character":30,"line":100}}},{"detail":"const char *const[10]","kind":13,"name":"auto_install","range":{"end":{"character":46,"line":145},"start":{"character":0,"line":143}},"selectionRange":{"end":{"character":37,"line":143},"start":{"character":25,"line":143}}},{"detail":"int (const int &)","kind":12,"name":"GetAutoInstallExtensionsRepository","range":{"end":{"character":1,"line":234},"start":{"character":0,"line":228}},"selectionRange":{"end":{"character":48,"line":228},"start":{"character":14,"line":228}}},{"detail":"int (int &, int &, int &, const int &, const int &)","kind":12,"name":"UpdateExtensionInternal","range":{"end":{"character":1,"line":332},"start":{"character":0,"line":257}},"selectionRange":{"end":{"character":52,"line":257},"start":{"character":29,"line":257}}},{"detail":"const char *const[21]","kind":13,"name":"public_keys","range":{"end":{"character":12,"line":778},"start":{"character":0,"line":558}},"selectionRange":{"end":{"character":36,"line":558},"start":{"character":25,"line":558}}},{"detail":"const char *const[20]","kind":13,"name":"community_public_keys","range":{"end":{"character":12,"line":989},"start":{"character":0,"line":780}},"selectionRange":{"end":{"character":46,"line":780},"start":{"character":25,"line":780}}}],"kind":3,"name":"duckdb","range":{"end":{"character":1,"line":1004},"start":{"character":0,"line":95}},"selectionRange":{"end":{"character":16,"line":95},"start":{"character":10,"line":95}}}]}},{"pid":0,"ph":"X","name":"Queued:DocumentLinks","ts":37213.792000000001,"tid":55670,"dur":1.305000000000291,"args":{"CurrentRequest":"Update","PreambleRequestsNames":[],"RequestsNames":["DocumentSymbols"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":37200.116999999998,"tid":55670,"id":3,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":130931.31299999999,"tid":55686,"bp":"e","id":3,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":130933.122,"tid":55686,"dur":3.4440000000031432,"args":{"path":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":130942.114,"tid":55686,"args":{"Message":"ASTWorker running DocumentLinks on version 1 of /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":130953.91499999999,"tid":55686,"args":{"Message":"--> reply:textDocument/documentLink(2) 93 ms"}},{"pid":0,"ph":"i","name":"Log","ts":130963.97199999999,"tid":55686,"args":{"Message":">>> {\"id\":2,\"jsonrpc\":\"2.0\",\"result\":[]}\n"}},{"pid":0,"ph":"X","name":"DocumentLinks","ts":130928.163,"tid":55686,"dur":40.877999999996973,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentLink","ts":37200.116999999998,"tid":55670,"dur":15.889000000002852,"args":{"Params":{"textDocument":{"uri":"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},"Reply":[]}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":37292.095999999998,"tid":55670,"dur":1.2950000000055297,"args":{"CurrentRequest":"Update","PreambleRequestsNames":[],"RequestsNames":["DocumentSymbols","DocumentLinks"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":37277.906000000003,"tid":55670,"id":4,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":130987.54700000001,"tid":55686,"bp":"e","id":4,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":130989.182,"tid":55686,"dur":2.8469999999942956,"args":{"path":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":131025.643,"tid":55686,"args":{"Message":"ASTWorker running InlayHints on version 1 of /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":131817.37299999999,"tid":55686,"args":{"Message":"--> reply:textDocument/inlayHint(3) 94 ms"}},{"pid":0,"ph":"i","name":"Log","ts":131832.481,"tid":55686,"args":{"Message":">>> {\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[]}\n"}},{"pid":0,"ph":"X","name":"InlayHints","ts":130985.077,"tid":55686,"dur":853.05199999998149,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":37277.906000000003,"tid":55670,"dur":16.42099999999482,"args":{"Params":{"range":{"end":{"character":21,"line":128},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},"Reply":[]}},{"pid":0,"ph":"X","name":"Queued:SemanticHighlights","ts":91985.031000000003,"tid":55670,"dur":2.2229999999981374,"args":{"CurrentRequest":"Build AST","PreambleRequestsNames":[],"RequestsNames":["DocumentSymbols","DocumentLinks","InlayHints"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":91967.811000000002,"tid":55670,"id":5,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":131852.77799999999,"tid":55686,"bp":"e","id":5,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":131854.25599999999,"tid":55686,"dur":3.8300000000162981,"args":{"path":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":131862.02600000001,"tid":55686,"args":{"Message":"ASTWorker running SemanticHighlights on version 1 of /home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":132378.59599999999,"tid":55686,"args":{"Message":"--> reply:textDocument/semanticTokens/full(4) 40 ms"}},{"pid":0,"ph":"i","name":"Log","ts":132440.60699999999,"tid":55686,"args":{"Message":">>> {\"id\":4,\"jsonrpc\":\"2.0\",\"result\":{\"data\":[15,8,38,19,131072,1,8,38,19,131073,3,8,27,19,131072,1,8,27,19,131073,3,8,29,19,131072,1,8,29,19,131073,3,8,31,19,131072,1,8,31,19,131073,3,8,28,19,131072,1,8,28,19,131073,3,8,29,19,131072,1,8,29,19,131073,3,8,30,19,131072,1,8,30,19,131073,3,8,28,19,131072,1,8,28,19,131073,3,8,32,19,131072,1,8,32,19,131073,3,8,36,19,131072,1,8,36,19,131073,4,12,27,19,131072,0,72,19,19,131072,5,4,38,19,131072,4,4,27,19,131072,4,4,31,19,131072,4,4,28,19,131072,4,4,29,19,131072,4,4,28,19,131072,4,4,32,19,131072,4,4,36,19,131072,6,10,6,15,131073,5,30,19,0,65555,1,48,38,19,131072,1,80,27,19,131072,1,60,29,19,131072,1,70,31,19,131072,1,61,28,19,131072,1,63,29,19,131072,1,87,30,19,131072,1,49,28,19,131072,1,62,32,19,131072,1,67,36,19,131072,33,25,12,0,65555,16,7,29,19,131072,69,14,34,3,65539,0,58,7,2,16403,1,8,14,1,16387,1,5,14,1,16384,0,15,5,14,33024,1,2,14,1,16384,0,15,1,21,8192,0,10,21,14,33024,26,29,23,3,65539,0,39,7,2,16387,0,27,2,2,16387,0,16,2,2,16387,1,67,19,2,16403,0,35,14,2,16403,1,23,6,1,16387,1,1,6,1,16384,0,7,14,14,33024,0,15,1,21,8192,2,7,6,1,16387,2,5,1,21,8192,0,4,10,14,33024,6,14,14,1,16403,1,5,1,21,8192,0,4,10,14,33024,6,6,17,1,16387,1,6,15,1,16387,1,5,1,21,8192,0,17,12,14,33024,0,15,2,21,8192,0,3,1,21,8192,0,8,7,14,33024,0,8,34,14,33024,1,8,11,14,256,7,1,6,1,16384,0,7,12,14,33024,0,13,1,21,8192,0,18,12,14,33024,0,15,1,21,0,0,18,17,14,33024,0,18,1,21,0,2,6,22,1,16387,11,2,6,1,16384,0,7,17,14,33024,0,18,1,21,8192,0,9,12,14,33024,4,6,20,1,16387,1,1,6,1,16384,0,7,10,14,33024,0,11,1,21,8192,0,23,16,14,33024,3,25,7,1,16387,1,1,7,1,16384,0,8,10,14,33024,0,11,1,21,8192,1,1,7,1,16384,0,8,13,14,33024,0,14,1,21,8192,1,1,7,1,16384,0,8,9,14,33024,0,10,1,21,8192,2,34,14,1,16387,3,26,1,1,16387,1,12,5,1,16387,1,2,5,1,16384,0,6,5,14,33024,0,59,1,21,8192,0,17,1,21,8192,3,1,6,1,16384,0,7,17,14,33024,0,18,1,21,8192,0,18,7,14,33024,2,5,6,1,16384,0,7,17,14,33024,0,18,5,14,33024,2,12,6,1,16384,0,7,17,14,33024,0,18,2,21,8192,0,10,12,14,33024,15,8,24,19,131072,52,8,11,19,131072,30,12,27,19,131072,13,7,26,19,131072,17,7,36,19,131072,15,12,27,19,131072,11,4,31,19,131072,7,4,27,19,131072,7,4,28,19,131072,7,4,29,19,131072,7,4,30,19,131072,6,4,28,19,131072,7,4,29,19,131072,7,4,32,19,131072,7,4,36,19,131072,14,4,38,19,131072,11,25,11,0,65555,222,25,21,0,65555],\"resultId\":\"1\"}}\n"}},{"pid":0,"ph":"X","name":"SemanticHighlights","ts":131850.766,"tid":55686,"dur":599.38300000000163,"args":{}},{"pid":0,"ph":"X","name":"textDocument/semanticTokens/full","ts":91967.811000000002,"tid":55670,"dur":20.793000000005122,"args":{"Params":{"textDocument":{"uri":"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},"Reply":{"data":[15,8,38,19,131072,1,8,38,19,131073,3,8,27,19,131072,1,8,27,19,131073,3,8,29,19,131072,1,8,29,19,131073,3,8,31,19,131072,1,8,31,19,131073,3,8,28,19,131072,1,8,28,19,131073,3,8,29,19,131072,1,8,29,19,131073,3,8,30,19,131072,1,8,30,19,131073,3,8,28,19,131072,1,8,28,19,131073,3,8,32,19,131072,1,8,32,19,131073,3,8,36,19,131072,1,8,36,19,131073,4,12,27,19,131072,0,72,19,19,131072,5,4,38,19,131072,4,4,27,19,131072,4,4,31,19,131072,4,4,28,19,131072,4,4,29,19,131072,4,4,28,19,131072,4,4,32,19,131072,4,4,36,19,131072,6,10,6,15,131073,5,30,19,0,65555,1,48,38,19,131072,1,80,27,19,131072,1,60,29,19,131072,1,70,31,19,131072,1,61,28,19,131072,1,63,29,19,131072,1,87,30,19,131072,1,49,28,19,131072,1,62,32,19,131072,1,67,36,19,131072,33,25,12,0,65555,16,7,29,19,131072,69,14,34,3,65539,0,58,7,2,16403,1,8,14,1,16387,1,5,14,1,16384,0,15,5,14,33024,1,2,14,1,16384,0,15,1,21,8192,0,10,21,14,33024,26,29,23,3,65539,0,39,7,2,16387,0,27,2,2,16387,0,16,2,2,16387,1,67,19,2,16403,0,35,14,2,16403,1,23,6,1,16387,1,1,6,1,16384,0,7,14,14,33024,0,15,1,21,8192,2,7,6,1,16387,2,5,1,21,8192,0,4,10,14,33024,6,14,14,1,16403,1,5,1,21,8192,0,4,10,14,33024,6,6,17,1,16387,1,6,15,1,16387,1,5,1,21,8192,0,17,12,14,33024,0,15,2,21,8192,0,3,1,21,8192,0,8,7,14,33024,0,8,34,14,33024,1,8,11,14,256,7,1,6,1,16384,0,7,12,14,33024,0,13,1,21,8192,0,18,12,14,33024,0,15,1,21,0,0,18,17,14,33024,0,18,1,21,0,2,6,22,1,16387,11,2,6,1,16384,0,7,17,14,33024,0,18,1,21,8192,0,9,12,14,33024,4,6,20,1,16387,1,1,6,1,16384,0,7,10,14,33024,0,11,1,21,8192,0,23,16,14,33024,3,25,7,1,16387,1,1,7,1,16384,0,8,10,14,33024,0,11,1,21,8192,1,1,7,1,16384,0,8,13,14,33024,0,14,1,21,8192,1,1,7,1,16384,0,8,9,14,33024,0,10,1,21,8192,2,34,14,1,16387,3,26,1,1,16387,1,12,5,1,16387,1,2,5,1,16384,0,6,5,14,33024,0,59,1,21,8192,0,17,1,21,8192,3,1,6,1,16384,0,7,17,14,33024,0,18,1,21,8192,0,18,7,14,33024,2,5,6,1,16384,0,7,17,14,33024,0,18,5,14,33024,2,12,6,1,16384,0,7,17,14,33024,0,18,2,21,8192,0,10,12,14,33024,15,8,24,19,131072,52,8,11,19,131072,30,12,27,19,131072,13,7,26,19,131072,17,7,36,19,131072,15,12,27,19,131072,11,4,31,19,131072,7,4,27,19,131072,7,4,28,19,131072,7,4,29,19,131072,7,4,30,19,131072,6,4,28,19,131072,7,4,29,19,131072,7,4,32,19,131072,7,4,36,19,131072,14,4,38,19,131072,11,25,11,0,65555,222,25,21,0,65555],"resultId":"1"}}},{"pid":0,"ph":"i","name":"Log","ts":132494.86600000001,"tid":55686,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":132508.08199999999,"tid":55686,"args":{"Message":">>> {\"jsonrpc\":\"2.0\",\"method\":\"textDocument/clangd.fileStatus\",\"params\":{\"state\":\"idle\",\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":219885.90900000001,"tid":55670,"args":{"Message":"<<< {\"id\":5,\"jsonrpc\":\"2.0\",\"method\":\"textDocument/foldingRange\",\"params\":{\"textDocument\":{\"uri\":\"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp\"}}}\n"}},{"pid":0,"ph":"i","name":"Log","ts":219919.87100000001,"tid":55670,"args":{"Message":"<-- textDocument/foldingRange(5)"}},{"pid":0,"ph":"M","name":"thread_name","tid":55690,"args":{"name":"FoldingRanges"}},{"pid":0,"ph":"X","name":"WaitForFreeSemaphoreSlot","ts":220045.12400000001,"tid":55690,"dur":7.4479999999748543,"args":{}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":219915.27900000001,"tid":55670,"id":6,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":220061.269,"tid":55690,"bp":"e","id":6,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":220057.97200000001,"tid":55690,"dur":13.794999999983702,"args":{"path":"/home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":221790.49900000001,"tid":55690,"args":{"Message":"--> reply:textDocument/foldingRange(5) 1 ms"}},{"pid":0,"ph":"i","name":"Log","ts":221934.07399999999,"tid":55690,"args":{"Message":">>> {\"id\":5,\"jsonrpc\":\"2.0\",\"result\":[{\"endLine\":1003,\"kind\":\"region\",\"startCharacter\":18,\"startLine\":95},{\"endCharacter\":29,\"endLine\":125,\"kind\":\"region\",\"startCharacter\":55,\"startLine\":100},{\"endLine\":132,\"kind\":\"region\",\"startCharacter\":48,\"startLine\":128},{\"endLine\":137,\"kind\":\"region\",\"startCharacter\":68,\"startLine\":135},{\"endCharacter\":45,\"endLine\":144,\"kind\":\"region\",\"startCharacter\":43,\"startLine\":143},{\"endLine\":155,\"kind\":\"region\",\"startCharacter\":65,\"startLine\":148},{\"endCharacter\":1,\"endLine\":153,\"kind\":\"region\",\"startCharacter\":42,\"startLine\":150},{\"endCharacter\":2,\"endLine\":152,\"kind\":\"region\",\"startCharacter\":42,\"startLine\":151},{\"endLine\":171,\"kind\":\"region\",\"startCharacter\":68,\"startLine\":158},{\"endCharacter\":1,\"endLine\":164,\"kind\":\"region\",\"startCharacter\":24,\"startLine\":163},{\"endCharacter\":1,\"endLine\":169,\"kind\":\"region\",\"startCharacter\":50,\"startLine\":166},{\"endCharacter\":2,\"endLine\":168,\"kind\":\"region\",\"startCharacter\":24,\"startLine\":167},{\"endLine\":177,\"kind\":\"region\",\"startCharacter\":89,\"startLine\":175},{\"endLine\":204,\"kind\":\"region\",\"startCharacter\":89,\"startLine\":180},{\"endCharacter\":1,\"endLine\":187,\"kind\":\"region\",\"startCharacter\":62,\"startLine\":185},{\"endCharacter\":1,\"endLine\":193,\"kind\":\"region\",\"startCharacter\":56,\"startLine\":188},{\"endCharacter\":1,\"endLine\":197,\"kind\":\"region\",\"startCharacter\":59,\"startLine\":194},{\"endCharacter\":1,\"endLine\":201,\"kind\":\"region\",\"startCharacter\":29,\"startLine\":200},{\"endLine\":225,\"kind\":\"region\",\"startCharacter\":107,\"startLine\":207},{\"endCharacter\":1,\"endLine\":209,\"kind\":\"region\",\"startCharacter\":53,\"startLine\":208},{\"endCharacter\":1,\"endLine\":222,\"kind\":\"region\",\"startCharacter\":6,\"startLine\":212},{\"endCharacter\":2,\"endLine\":219,\"kind\":\"region\",\"startCharacter\":54,\"startLine\":213},{\"endCharacter\":1,\"endLine\":224,\"kind\":\"region\",\"startCharacter\":16,\"startLine\":223},{\"endLine\":233,\"kind\":\"region\",\"startCharacter\":82,\"startLine\":228},{\"endCharacter\":1,\"endLine\":231,\"kind\":\"region\",\"startCharacter\":30,\"startLine\":230},{\"endLine\":254,\"kind\":\"region\",\"startCharacter\":111,\"startLine\":236},{\"endCharacter\":1,\"endLine\":238,\"kind\":\"region\",\"startCharacter\":50,\"startLine\":237},{\"endCharacter\":1,\"endLine\":251,\"kind\":\"region\",\"startCharacter\":6,\"startLine\":241},{\"endCharacter\":2,\"endLine\":248,\"kind\":\"region\",\"startCharacter\":54,\"startLine\":243},{\"endCharacter\":1,\"endLine\":253,\"kind\":\"region\",\"startCharacter\":16,\"startLine\":252},{\"endLine\":331,\"kind\":\"region\",\"startCharacter\":119,\"startLine\":258},{\"endCharacter\":1,\"endLine\":266,\"kind\":\"region\",\"startCharacter\":43,\"startLine\":264},{\"endCharacter\":1,\"endLine\":273,\"kind\":\"region\",\"startCharacter\":38,\"startLine\":271},{\"endCharacter\":1,\"endLine\":284,\"kind\":\"region\",\"startCharacter\":93,\"startLine\":279},{\"endCharacter\":57,\"endLine\":283,\"kind\":\"region\",\"startCharacter\":20,\"startLine\":280},{\"endCharacter\":1,\"endLine\":294,\"kind\":\"region\",\"startCharacter\":69,\"startLine\":292},{\"endCharacter\":1,\"endLine\":301,\"kind\":\"region\",\"startCharacter\":72,\"startLine\":298},{\"endCharacter\":1,\"endLine\":315,\"kind\":\"region\",\"startCharacter\":6,\"startLine\":314},{\"endCharacter\":1,\"endLine\":318,\"kind\":\"region\",\"startCharacter\":30,\"startLine\":316},{\"endCharacter\":1,\"endLine\":324,\"kind\":\"region\",\"startCharacter\":40,\"startLine\":323},{\"endCharacter\":1,\"endLine\":326,\"kind\":\"region\",\"startCharacter\":62,\"startLine\":325},{\"endCharacter\":1,\"endLine\":328,\"kind\":\"region\",\"startCharacter\":9,\"startLine\":327},{\"endLine\":359,\"kind\":\"region\",\"startCharacter\":89,\"startLine\":334},{\"endCharacter\":2,\"endLine\":355,\"kind\":\"region\",\"startCharacter\":14,\"startLine\":345},{\"endCharacter\":1,\"endLine\":355,\"kind\":\"region\",\"startCharacter\":73,\"startLine\":345},{\"endCharacter\":2,\"endLine\":347,\"kind\":\"region\",\"startCharacter\":57,\"startLine\":346},{\"endLine\":377,\"kind\":\"region\",\"startCharacter\":110,\"startLine\":362},{\"endCharacter\":1,\"endLine\":373,\"kind\":\"region\",\"startCharacter\":68,\"startLine\":371},{\"endCharacter\":1,\"endLine\":375,\"kind\":\"region\",\"startCharacter\":69,\"startLine\":374},{\"endLine\":381,\"kind\":\"region\",\"startCharacter\":95,\"startLine\":380},{\"endLine\":406,\"kind\":\"region\",\"startCharacter\":93,\"startLine\":384},{\"endCharacter\":1,\"endLine\":387,\"kind\":\"region\",\"startCharacter\":44,\"startLine\":385},{\"endCharacter\":1,\"endLine\":402,\"kind\":\"region\",\"startCharacter\":6,\"startLine\":390},{\"endCharacter\":2,\"endLine\":398,\"kind\":\"region\",\"startCharacter\":54,\"startLine\":393},{\"endCharacter\":1,\"endLine\":405,\"kind\":\"region\",\"startCharacter\":30,\"startLine\":403},{\"endLine\":426,\"kind\":\"region\",\"startCharacter\":53,\"startLine\":412},{\"endCharacter\":1,\"endLine\":419,\"kind\":\"region\",\"startCharacter\":31,\"startLine\":418},{\"endCharacter\":1,\"endLine\":424,\"kind\":\"region\",\"startCharacter\":45,\"startLine\":423},{\"endLine\":430,\"kind\":\"region\",\"startCharacter\":94,\"startLine\":429},{\"endLine\":555,\"kind\":\"region\",\"startCharacter\":79,\"startLine\":434},{\"endCharacter\":1,\"endLine\":448,\"kind\":\"region\",\"startCharacter\":84,\"startLine\":436},{\"endCharacter\":2,\"endLine\":441,\"kind\":\"region\",\"startCharacter\":27,\"startLine\":439},{\"endCharacter\":2,\"endLine\":446,\"kind\":\"region\",\"startCharacter\":27,\"startLine\":444},{\"endCharacter\":1,\"endLine\":462,\"kind\":\"region\",\"startCharacter\":106,\"startLine\":454},{\"endCharacter\":2,\"endLine\":460,\"kind\":\"region\",\"startCharacter\":27,\"startLine\":458},{\"endCharacter\":1,\"endLine\":469,\"kind\":\"region\",\"startCharacter\":45,\"startLine\":468},{\"endCharacter\":1,\"endLine\":471,\"kind\":\"region\",\"startCharacter\":9,\"startLine\":470},{\"endCharacter\":1,\"endLine\":483,\"kind\":\"region\",\"startCharacter\":30,\"startLine\":477},{\"endCharacter\":1,\"endLine\":490,\"kind\":\"region\",\"startCharacter\":33,\"startLine\":484},{\"endCharacter\":1,\"endLine\":497,\"kind\":\"region\",\"startCharacter\":34,\"startLine\":491},{\"endCharacter\":1,\"endLine\":504,\"kind\":\"region\",\"startCharacter\":35,\"startLine\":498},{\"endCharacter\":1,\"endLine\":510,\"kind\":\"region\",\"startCharacter\":36,\"startLine\":505},{\"endCharacter\":1,\"endLine\":517,\"kind\":\"region\",\"startCharacter\":34,\"startLine\":511},{\"endCharacter\":1,\"endLine\":524,\"kind\":\"region\",\"startCharacter\":35,\"startLine\":518},{\"endCharacter\":1,\"endLine\":531,\"kind\":\"region\",\"startCharacter\":38,\"startLine\":525},{\"endCharacter\":1,\"endLine\":538,\"kind\":\"region\",\"startCharacter\":42,\"startLine\":532},{\"endCharacter\":1,\"endLine\":545,\"kind\":\"region\",\"startCharacter\":34,\"startLine\":539},{\"endCharacter\":1,\"endLine\":552,\"kind\":\"region\",\"startCharacter\":44,\"startLine\":546},{\"endCharacter\":11,\"endLine\":777,\"kind\":\"region\",\"startCharacter\":42,\"startLine\":558},{\"endCharacter\":11,\"endLine\":988,\"kind\":\"region\",\"startCharacter\":52,\"startLine\":780},{\"endLine\":1001,\"kind\":\"region\",\"startCharacter\":86,\"startLine\":991},{\"endCharacter\":1,\"endLine\":994,\"kind\":\"region\",\"startCharacter\":41,\"startLine\":993},{\"endCharacter\":1,\"endLine\":999,\"kind\":\"region\",\"startCharacter\":34,\"startLine\":996},{\"endCharacter\":2,\"endLine\":998,\"kind\":\"region\",\"startCharacter\":52,\"startLine\":997},{\"endCharacter\":37,\"endLine\":14,\"kind\":\"comment\",\"startCharacter\":2,\"startLine\":13},{\"endCharacter\":25,\"endLine\":60,\"kind\":\"comment\",\"startCharacter\":2,\"startLine\":59},{\"endCharacter\":78,\"endLine\":99,\"kind\":\"comment\",\"startCharacter\":2,\"startLine\":97},{\"endCharacter\":78,\"endLine\":142,\"kind\":\"comment\",\"startCharacter\":2,\"startLine\":140},{\"endCharacter\":78,\"endLine\":411,\"kind\":\"comment\",\"startCharacter\":2,\"startLine\":409},{\"endCharacter\":26,\"endLine\":415,\"kind\":\"comment\",\"startCharacter\":3,\"startLine\":413},{\"endCharacter\":99,\"endLine\":476,\"kind\":\"comment\",\"startCharacter\":3,\"startLine\":475}]}\n"}},{"pid":0,"ph":"X","name":"textDocument/foldingRange","ts":219915.27900000001,"tid":55670,"dur":92.584999999991851,"args":{"Params":{"textDocument":{"uri":"file:///home/prady/code/duckdb-snowflake/duckdb/src/main/extension/extension_helper.cpp"}},"Reply":[{"endLine":1003,"kind":"region","startCharacter":18,"startLine":95},{"endCharacter":29,"endLine":125,"kind":"region","startCharacter":55,"startLine":100},{"endLine":132,"kind":"region","startCharacter":48,"startLine":128},{"endLine":137,"kind":"region","startCharacter":68,"startLine":135},{"endCharacter":45,"endLine":144,"kind":"region","startCharacter":43,"startLine":143},{"endLine":155,"kind":"region","startCharacter":65,"startLine":148},{"endCharacter":1,"endLine":153,"kind":"region","startCharacter":42,"startLine":150},{"endCharacter":2,"endLine":152,"kind":"region","startCharacter":42,"startLine":151},{"endLine":171,"kind":"region","startCharacter":68,"startLine":158},{"endCharacter":1,"endLine":164,"kind":"region","startCharacter":24,"startLine":163},{"endCharacter":1,"endLine":169,"kind":"region","startCharacter":50,"startLine":166},{"endCharacter":2,"endLine":168,"kind":"region","startCharacter":24,"startLine":167},{"endLine":177,"kind":"region","startCharacter":89,"startLine":175},{"endLine":204,"kind":"region","startCharacter":89,"startLine":180},{"endCharacter":1,"endLine":187,"kind":"region","startCharacter":62,"startLine":185},{"endCharacter":1,"endLine":193,"kind":"region","startCharacter":56,"startLine":188},{"endCharacter":1,"endLine":197,"kind":"region","startCharacter":59,"startLine":194},{"endCharacter":1,"endLine":201,"kind":"region","startCharacter":29,"startLine":200},{"endLine":225,"kind":"region","startCharacter":107,"startLine":207},{"endCharacter":1,"endLine":209,"kind":"region","startCharacter":53,"startLine":208},{"endCharacter":1,"endLine":222,"kind":"region","startCharacter":6,"startLine":212},{"endCharacter":2,"endLine":219,"kind":"region","startCharacter":54,"startLine":213},{"endCharacter":1,"endLine":224,"kind":"region","startCharacter":16,"startLine":223},{"endLine":233,"kind":"region","startCharacter":82,"startLine":228},{"endCharacter":1,"endLine":231,"kind":"region","startCharacter":30,"startLine":230},{"endLine":254,"kind":"region","startCharacter":111,"startLine":236},{"endCharacter":1,"endLine":238,"kind":"region","startCharacter":50,"startLine":237},{"endCharacter":1,"endLine":251,"kind":"region","startCharacter":6,"startLine":241},{"endCharacter":2,"endLine":248,"kind":"region","startCharacter":54,"startLine":243},{"endCharacter":1,"endLine":253,"kind":"region","startCharacter":16,"startLine":252},{"endLine":331,"kind":"region","startCharacter":119,"startLine":258},{"endCharacter":1,"endLine":266,"kind":"region","startCharacter":43,"startLine":264},{"endCharacter":1,"endLine":273,"kind":"region","startCharacter":38,"startLine":271},{"endCharacter":1,"endLine":284,"kind":"region","startCharacter":93,"startLine":279},{"endCharacter":57,"endLine":283,"kind":"region","startCharacter":20,"startLine":280},{"endCharacter":1,"endLine":294,"kind":"region","startCharacter":69,"startLine":292},{"endCharacter":1,"endLine":301,"kind":"region","startCharacter":72,"startLine":298},{"endCharacter":1,"endLine":315,"kind":"region","startCharacter":6,"startLine":314},{"endCharacter":1,"endLine":318,"kind":"region","startCharacter":30,"startLine":316},{"endCharacter":1,"endLine":324,"kind":"region","startCharacter":40,"startLine":323},{"endCharacter":1,"endLine":326,"kind":"region","startCharacter":62,"startLine":325},{"endCharacter":1,"endLine":328,"kind":"region","startCharacter":9,"startLine":327},{"endLine":359,"kind":"region","startCharacter":89,"startLine":334},{"endCharacter":2,"endLine":355,"kind":"region","startCharacter":14,"startLine":345},{"endCharacter":1,"endLine":355,"kind":"region","startCharacter":73,"startLine":345},{"endCharacter":2,"endLine":347,"kind":"region","startCharacter":57,"startLine":346},{"endLine":377,"kind":"region","startCharacter":110,"startLine":362},{"endCharacter":1,"endLine":373,"kind":"region","startCharacter":68,"startLine":371},{"endCharacter":1,"endLine":375,"kind":"region","startCharacter":69,"startLine":374},{"endLine":381,"kind":"region","startCharacter":95,"startLine":380},{"endLine":406,"kind":"region","startCharacter":93,"startLine":384},{"endCharacter":1,"endLine":387,"kind":"region","startCharacter":44,"startLine":385},{"endCharacter":1,"endLine":402,"kind":"region","startCharacter":6,"startLine":390},{"endCharacter":2,"endLine":398,"kind":"region","startCharacter":54,"startLine":393},{"endCharacter":1,"endLine":405,"kind":"region","startCharacter":30,"startLine":403},{"endLine":426,"kind":"region","startCharacter":53,"startLine":412},{"endCharacter":1,"endLine":419,"kind":"region","startCharacter":31,"startLine":418},{"endCharacter":1,"endLine":424,"kind":"region","startCharacter":45,"startLine":423},{"endLine":430,"kind":"region","startCharacter":94,"startLine":429},{"endLine":555,"kind":"region","startCharacter":79,"startLine":434},{"endCharacter":1,"endLine":448,"kind":"region","startCharacter":84,"startLine":436},{"endCharacter":2,"endLine":441,"kind":"region","startCharacter":27,"startLine":439},{"endCharacter":2,"endLine":446,"kind":"region","startCharacter":27,"startLine":444},{"endCharacter":1,"endLine":462,"kind":"region","startCharacter":106,"startLine":454},{"endCharacter":2,"endLine":460,"kind":"region","startCharacter":27,"startLine":458},{"endCharacter":1,"endLine":469,"kind":"region","startCharacter":45,"startLine":468},{"endCharacter":1,"endLine":471,"kind":"region","startCharacter":9,"startLine":470},{"endCharacter":1,"endLine":483,"kind":"region","startCharacter":30,"startLine":477},{"endCharacter":1,"endLine":490,"kind":"region","startCharacter":33,"startLine":484},{"endCharacter":1,"endLine":497,"kind":"region","startCharacter":34,"startLine":491},{"endCharacter":1,"endLine":504,"kind":"region","startCharacter":35,"startLine":498},{"endCharacter":1,"endLine":510,"kind":"region","startCharacter":36,"startLine":505},{"endCharacter":1,"endLine":517,"kind":"region","startCharacter":34,"startLine":511},{"endCharacter":1,"endLine":524,"kind":"region","startCharacter":35,"startLine":518},{"endCharacter":1,"endLine":531,"kind":"region","startCharacter":38,"startLine":525},{"endCharacter":1,"endLine":538,"kind":"region","startCharacter":42,"startLine":532},{"endCharacter":1,"endLine":545,"kind":"region","startCharacter":34,"startLine":539},{"endCharacter":1,"endLine":552,"kind":"region","startCharacter":44,"startLine":546},{"endCharacter":11,"endLine":777,"kind":"region","startCharacter":42,"startLine":558},{"endCharacter":11,"endLine":988,"kind":"region","startCharacter":52,"startLine":780},{"endLine":1001,"kind":"region","startCharacter":86,"startLine":991},{"endCharacter":1,"endLine":994,"kind":"region","startCharacter":41,"startLine":993},{"endCharacter":1,"endLine":999,"kind":"region","startCharacter":34,"startLine":996},{"endCharacter":2,"endLine":998,"kind":"region","startCharacter":52,"startLine":997},{"endCharacter":37,"endLine":14,"kind":"comment","startCharacter":2,"startLine":13},{"endCharacter":25,"endLine":60,"kind":"comment","startCharacter":2,"startLine":59},{"endCharacter":78,"endLine":99,"kind":"comment","startCharacter":2,"startLine":97},{"endCharacter":78,"endLine":142,"kind":"comment","startCharacter":2,"startLine":140},{"endCharacter":78,"endLine":411,"kind":"comment","startCharacter":2,"startLine":409},{"endCharacter":26,"endLine":415,"kind":"comment","startCharacter":3,"startLine":413},{"endCharacter":99,"endLine":476,"kind":"comment","startCharacter":3,"startLine":475}]}},{"pid":0,"ph":"i","name":"Log","ts":666191.93999999994,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:102:49:too many arguments provided to function-like macro invocation"}},{"pid":0,"ph":"i","name":"Log","ts":666240.79000000004,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/lib/llvm-18/lib/clang/18/include/stdatomic.h:87:9:macro 'atomic_is_lock_free' defined here"}},{"pid":0,"ph":"i","name":"Log","ts":666268.65500000003,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:102:5:redefinition of 'atomic_is_lock_free' as different kind of symbol"}},{"pid":0,"ph":"i","name":"Log","ts":666278.43599999999,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:1294:5:previous definition is here"}},{"pid":0,"ph":"i","name":"Log","ts":666289.17200000002,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:105:7:expected expression"}},{"pid":0,"ph":"i","name":"Log","ts":666305.40899999999,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:109:6:expected ';' at end of declaration"}},{"pid":0,"ph":"i","name":"Log","ts":666349.55700000003,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:113:48:expected ')'"}},{"pid":0,"ph":"i","name":"Log","ts":666404.13800000004,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:113:5:to match this '('"}},{"pid":0,"ph":"i","name":"Log","ts":666413.16599999997,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:113:5:expected expression"}},{"pid":0,"ph":"i","name":"Log","ts":666423.69099999999,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:113:52:expected ';' at end of declaration"}},{"pid":0,"ph":"i","name":"Log","ts":666431.67200000002,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:114:5:expected unqualified-id"}},{"pid":0,"ph":"i","name":"Log","ts":666513.69499999995,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:137:5:expected parameter declarator"}},{"pid":0,"ph":"i","name":"Log","ts":666523.18200000003,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:137:5:expected ')'"}},{"pid":0,"ph":"i","name":"Log","ts":666528.89399999997,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:137:5:to match this '('"}},{"pid":0,"ph":"i","name":"Log","ts":666606.88500000001,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:150:41:too many arguments provided to function-like macro invocation"}},{"pid":0,"ph":"i","name":"Log","ts":666616.73100000003,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/lib/llvm-18/lib/clang/18/include/stdatomic.h:138:9:macro 'atomic_load' defined here"}},{"pid":0,"ph":"i","name":"Log","ts":666632.06799999997,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:150:5:redefinition of 'atomic_load' as different kind of symbol"}},{"pid":0,"ph":"i","name":"Log","ts":666638.95600000001,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/atomic:1397:5:previous definition is here"}},{"pid":0,"ph":"i","name":"Log","ts":666646.04599999997,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:151:7:expected expression"}},{"pid":0,"ph":"i","name":"Log","ts":666655.71699999995,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:151:69:expected ';' at end of declaration"}},{"pid":0,"ph":"i","name":"Log","ts":666718.31599999999,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:174:5:expected parameter declarator"}},{"pid":0,"ph":"i","name":"Log","ts":666728.29000000004,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:174:5:expected ')'"}},{"pid":0,"ph":"i","name":"Log","ts":666733.81799999997,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:174:5:to match this '('"}},{"pid":0,"ph":"i","name":"Log","ts":666811.73600000003,"tid":55688,"args":{"Message":"Ignored diagnostic. /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/shared_ptr_atomic.h:189:47:too many arguments provided to function-like macro invo