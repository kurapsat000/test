# name: test/sql/snowflake_client_advanced.test
# description: Advanced tests for snowflake client functions (ListSchemas, ListTables, GetTableInfo)
# group: [sql]

# Require statement will ensure this test is run with this extension loaded
require snowflake

# These tests cover functions that would be exposed through the ATTACH functionality
# Currently these are internal functions, but the tests demonstrate expected behavior

# Test 1: snowflake_attach should list schemas when connected
# Once implemented, this would show available schemas
statement error
SELECT * FROM snowflake_attach('account=test;user=test;password=test;warehouse=test;database=testdb');
----
Failed to initialize connection

# Test 2: Schema discovery with filters
# Future functionality: list schemas matching a pattern
statement error
SELECT * FROM snowflake_attach(
    'account=test;user=test;password=test;warehouse=test;database=testdb',
    schema_filter => 'PUBLIC%'
);
----
Invalid named parameter "schema_filter" for function snowflake_attach

# Test 3: Table discovery within a schema
# Future functionality: list tables in a specific schema
statement error
SELECT * FROM snowflake_list_tables(
    'account=test;user=test;password=test;warehouse=test;database=testdb',
    'PUBLIC'
);
----
Catalog Error: Table Function with name snowflake_list_tables does not exist!

# Test 4: Get table metadata
# Future functionality: get column information for a specific table
statement error
SELECT * FROM snowflake_table_info(
    'account=test;user=test;password=test;warehouse=test;database=testdb',
    'PUBLIC',
    'CUSTOMERS'
);
----
Catalog Error: Table Function with name snowflake_table_info does not exist!

# Test 5: Test connection with OAuth token (future feature)
statement error
SELECT * FROM snowflake_scan(
    'account=test;user=test;authenticator=oauth;token=dummy_token;warehouse=test',
    'SELECT 1'
);
----
Failed to initialize connection

# Test 6: Test connection with key-pair authentication (future feature)
statement error
SELECT * FROM snowflake_scan(
    'account=test;user=test;private_key_path=/path/to/key.pem;warehouse=test',
    'SELECT 1'
);
----
Failed to initialize connection

# Test 7: Connection timeout handling
# Future: Add timeout parameter to connection string
statement error
SELECT * FROM snowflake_scan(
    'account=test;user=test;password=test;warehouse=test;connection_timeout=5',
    'SELECT 1'
);
----
Failed to initialize connection

# Test 8: Query timeout handling
# Future: Add query timeout parameter
statement error
SELECT * FROM snowflake_scan(
    'account=test;user=test;password=test;warehouse=test;query_timeout=30',
    'SELECT 1'
);
----
Failed to initialize connection

# Integration tests with real credentials (commented out)
# These would test the actual client manager functions

# # List all schemas in a database
# query II
# SELECT schema_name, is_managed FROM snowflake_attach(
#     'account=real_account;user=real_user;password=real_pass;warehouse=COMPUTE_WH;database=SNOWFLAKE_SAMPLE_DATA'
# ) ORDER BY schema_name;
# ----
# INFORMATION_SCHEMA	true
# PUBLIC	true
# TPCDS_SF10TCL	true
# TPCDS_SF100TCL	true
# TPCH_SF1	true
# TPCH_SF10	true
# TPCH_SF100	true
# TPCH_SF1000	true

# # List tables in a specific schema
# query III
# SELECT table_name, table_type, row_count FROM snowflake_list_tables(
#     'account=real_account;user=real_user;password=real_pass;warehouse=COMPUTE_WH;database=SNOWFLAKE_SAMPLE_DATA',
#     'TPCH_SF1'
# ) WHERE table_name LIKE 'CUSTOMER%' ORDER BY table_name;
# ----
# CUSTOMER	TABLE	150000

# # Get column information for a table
# query IIII
# SELECT column_name, data_type, is_nullable, column_default FROM snowflake_table_info(
#     'account=real_account;user=real_user;password=real_pass;warehouse=COMPUTE_WH;database=SNOWFLAKE_SAMPLE_DATA',
#     'TPCH_SF1',
#     'CUSTOMER'
# ) ORDER BY ordinal_position LIMIT 5;
# ----
# C_CUSTKEY	NUMBER(38,0)	false	NULL
# C_NAME	VARCHAR(25)	false	NULL
# C_ADDRESS	VARCHAR(40)	false	NULL
# C_NATIONKEY	NUMBER(38,0)	false	NULL
# C_PHONE	VARCHAR(15)	false	NULL

# # Test connection pooling with metadata queries
# # First query creates connection
# query I
# SELECT COUNT(*) FROM snowflake_attach(
#     'account=real_account;user=real_user;password=real_pass;warehouse=COMPUTE_WH;database=SNOWFLAKE_SAMPLE_DATA'
# );
# ----
# 8
#
# # Second query reuses connection from pool
# query I
# SELECT COUNT(*) FROM snowflake_list_tables(
#     'account=real_account;user=real_user;password=real_pass;warehouse=COMPUTE_WH;database=SNOWFLAKE_SAMPLE_DATA',
#     'PUBLIC'
# );
# ----
# 0