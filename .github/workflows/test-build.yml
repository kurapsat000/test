name: Fast Multi-OS Build Test
on:
  workflow_dispatch:
  push:
    branches: [ "Andy-main-full" ]

jobs:
  test-dependencies:
    name: Test Dependencies (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            shell: bash
          - os: macos-latest  
            triplet: x64-osx
            shell: bash
          - os: windows-latest
            triplet: x64-windows
            shell: pwsh

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Free Disk Space (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      - name: Free Disk Space (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          sudo rm -rf /Applications/Xcode_*.app
          brew cleanup --prune=all
          df -h

      - name: Install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake pkg-config build-essential

      - name: Install build tools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja cmake pkg-config

      - name: Install build tools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja cmake

      - name: Setup vcpkg (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          git clone https://github.com/Microsoft/vcpkg.git vcpkg
          cd vcpkg
          ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV

      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/Microsoft/vcpkg.git vcpkg
          cd vcpkg
          .\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=$PWD" >> $env:GITHUB_ENV

      - name: Test essential dependencies (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd vcpkg
          ./vcpkg install protobuf:${{ matrix.triplet }} --classic
          ./vcpkg install grpc:${{ matrix.triplet }} --classic
          ./vcpkg install openssl:${{ matrix.triplet }} --classic

      - name: Test essential dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd vcpkg
          .\vcpkg install protobuf:${{ matrix.triplet }} --classic
          .\vcpkg install grpc:${{ matrix.triplet }} --classic
          .\vcpkg install openssl:${{ matrix.triplet }} --classic

      - name: Test CMake with essential dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p build/test
          cd build/test
          
          # Create a minimal test CMakeLists.txt
          @"
          cmake_minimum_required(VERSION 3.5)
          project(TestDeps)
          
          # Test essential dependency resolution
          find_package(Protobuf CONFIG REQUIRED)
          find_package(gRPC CONFIG REQUIRED)
          find_package(OpenSSL REQUIRED)
          
          message(STATUS "âœ… Protobuf found: `${Protobuf_FOUND}")
          message(STATUS "âœ… gRPC found: `${gRPC_FOUND}")
          message(STATUS "âœ… OpenSSL found: `${OPENSSL_FOUND}")
          
          # Create a dummy target to test linking
          add_executable(test_deps test.cpp)
          target_link_libraries(test_deps 
            protobuf::libprotobuf 
            gRPC::grpc++
            OpenSSL::SSL
          )
          "@ | Out-File -FilePath CMakeLists.txt -Encoding utf8
          
          # Create dummy source file
          echo 'int main(){return 0;}' > test.cpp
          
          # Test CMake configuration
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" .

      - name: Test CMake with essential dependencies (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p build/test
          cd build/test
          
          # Create a minimal test CMakeLists.txt
          cat > CMakeLists.txt << 'EOF'
          cmake_minimum_required(VERSION 3.5)
          project(TestDeps)
          
          # Test essential dependency resolution
          find_package(Protobuf CONFIG REQUIRED)
          find_package(gRPC CONFIG REQUIRED)
          find_package(OpenSSL REQUIRED)
          
          message(STATUS "âœ… Protobuf found: ${Protobuf_FOUND}")
          message(STATUS "âœ… gRPC found: ${gRPC_FOUND}")
          message(STATUS "âœ… OpenSSL found: ${OPENSSL_FOUND}")
          
          # Create a dummy target to test linking
          add_executable(test_deps test.cpp)
          target_link_libraries(test_deps 
            protobuf::libprotobuf 
            gRPC::grpc++
            OpenSSL::SSL
          )
          EOF
          
          # Create dummy source file
          echo 'int main(){return 0;}' > test.cpp
          
          # Test CMake configuration
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
            .

      - name: Test build configuration
        run: |
          cd build/test
          cmake --build . --config Release

      - name: Show disk usage (Unix)
        if: matrix.os != 'windows-latest'
        run: df -h

      - name: Show disk usage (Windows)
        if: matrix.os == 'windows-latest'
        run: Get-PSDrive

  test-manifest-mode:
    name: Test Manifest Mode (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test-dependencies
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]  # Skip Windows for manifest complexity
        include:
          - os: ubuntu-latest
            triplet: x64-linux
          - os: macos-latest  
            triplet: x64-osx

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Free Disk Space
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
            sudo docker image prune --all --force
          else
            sudo rm -rf /Applications/Xcode_*.app
            brew cleanup --prune=all
          fi
          df -h

      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git vcpkg
          cd vcpkg
          ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV

      - name: Test manifest mode dependency resolution
        run: |
          # Test our exact vcpkg.json configuration
          vcpkg install --triplet=${{ matrix.triplet }} --dry-run

      - name: Install manifest dependencies (minimal for testing)
        run: |
          # Install only essential dependencies from manifest for testing
          vcpkg install openssl:${{ matrix.triplet }} --classic
          vcpkg install protobuf:${{ matrix.triplet }} --classic

      - name: Test CMake with manifest configuration
        run: |
          mkdir -p build/manifest-test
          cd build/manifest-test
          
          # Test with our exact dependency resolution order
          cat > CMakeLists.txt << 'EOF'
          cmake_minimum_required(VERSION 3.5)
          project(ManifestTest)
          
          # Test our exact dependency resolution order
          find_package(Protobuf CONFIG REQUIRED)
          find_package(OpenSSL REQUIRED)
          
          message(STATUS "âœ… Manifest mode dependencies found!")
          message(STATUS "âœ… Protobuf: ${Protobuf_VERSION}")
          message(STATUS "âœ… OpenSSL: ${OPENSSL_VERSION}")
          
          # Test linking
          add_executable(manifest_test test.cpp)
          target_link_libraries(manifest_test
            protobuf::libprotobuf
            OpenSSL::SSL
            OpenSSL::Crypto
          )
          EOF
          
          echo 'int main(){ return 0; }' > test.cpp
          
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
            .

      - name: Test manifest build
        run: |
          cd build/manifest-test
          cmake --build . --config Release

      - name: Success summary
        run: |
          echo "ðŸŽ‰ SUCCESS: Manifest mode works correctly on ${{ matrix.os }}"
          echo "âœ… vcpkg.json dependency resolution successful"
          echo "âœ… CMake integration successful"
          echo "âœ… Cross-platform compatibility confirmed" 