#
# This workflow calls the main distribution pipeline from DuckDB to build, test and (optionally) release the extension
#
name: Main Distribution Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Enable GitHub Actions to create pull requests
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Fast build check - only build the extension, not full DuckDB
  quick-build-check:
    name: Quick Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '2024.01.12'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake
          restore-keys: |
            vcpkg-ubuntu-

      - name: Build Extension Only
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DEXTENSION_STATIC_BUILD=1 -DDUCKDB_EXTENSION_CONFIGS=$GITHUB_WORKSPACE/extension_config.cmake -S ../duckdb/
          cmake --build . --target snowflake_extension --parallel

  # Full DuckDB build with extension
  duckdb-stable-build:
    name: Build extension binaries
    runs-on: ubuntu-latest
    needs: [quick-build-check]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '2024.01.12'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake
          restore-keys: |
            vcpkg-ubuntu-

      - name: Build DuckDB with Extension
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DEXTENSION_STATIC_BUILD=1 -DDUCKDB_EXTENSION_CONFIGS=$GITHUB_WORKSPACE/extension_config.cmake -S ../duckdb/
          cmake --build . --parallel

      - name: Package Extension
        run: |
          cd build
          # Create extension package
          mkdir -p extension-binaries
          cp -r repository/* extension-binaries/

      - name: Upload Extension Binaries
        uses: actions/upload-artifact@v4
        with:
          name: extension-binaries
          path: build/extension-binaries

  # Code quality check - run in parallel with build
  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '2024.01.12'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake
          restore-keys: |
            vcpkg-ubuntu-

      - name: Build for formatting check
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DEXTENSION_STATIC_BUILD=1 -DDUCKDB_EXTENSION_CONFIGS=$GITHUB_WORKSPACE/extension_config.cmake -S ../duckdb/
          cmake --build . --target snowflake_extension --parallel

      - name: Check formatting
        run: |
          cd build
          cmake --build . --target format-check

      - name: Run clang-tidy
        run: |
          cd build
          cmake --build . --target tidy-check

  # Test the extension
  test-extension:
    name: Test Extension
    runs-on: ubuntu-latest
    needs: [quick-build-check]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '2024.01.12'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake
          restore-keys: |
            vcpkg-ubuntu-

      - name: Build and Test
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DEXTENSION_STATIC_BUILD=1 -DDUCKDB_EXTENSION_CONFIGS=$GITHUB_WORKSPACE/extension_config.cmake -S ../duckdb/
          cmake --build . --parallel
          # Run only extension-specific tests
          ./test/unittest "test/sql/snowflake*"

  # Upload extension to DuckDB extension repository
  upload-extension:
    name: Upload Extension
    runs-on: ubuntu-latest
    needs: [duckdb-stable-build, code-quality-check, test-extension]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Extension Binaries
        uses: actions/download-artifact@v4
        with:
          name: extension-binaries
          path: extension-binaries

      - name: Upload to DuckDB Extension Repository
        run: |
          echo "Extension binaries ready for upload:"
          ls -la extension-binaries/
          # TODO: Implement actual upload logic when needed
