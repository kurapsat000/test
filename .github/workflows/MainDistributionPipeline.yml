#
# This workflow calls the main distribution pipeline from DuckDB to build, test and (optionally) release the extension
#
name: Main Distribution Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  extension_name: snowflake
  extra_toolchains: 'parser_tools'

jobs:
  # Quick build check to catch basic compilation errors early
  quick-build-check:
    name: Quick Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake
          restore-keys: |
            vcpkg-ubuntu-

      - name: Build Extension Only
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DEXTENSION_STATIC_BUILD=1 -DDUCKDB_EXTENSION_CONFIGS=$GITHUB_WORKSPACE/extension_config.cmake -S ../duckdb/
          cmake --build . --target snowflake_extension --parallel 4

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/

  # Code quality check (reuses build artifacts)
  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: [quick-build-check]
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake
          restore-keys: |
            vcpkg-ubuntu-

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Run clang-tidy
        run: |
          cd build
          cmake --build . --target tidy-check

  # Full DuckDB build with extension (reuses build artifacts)
  duckdb-stable-build:
    name: Build extension binaries
    runs-on: ubuntu-latest
    needs: [quick-build-check]
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake
          restore-keys: |
            vcpkg-ubuntu-

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Complete Build
        run: |
          cd build
          # Complete the build with all targets
          cmake --build . --parallel 2

      - name: Package Extension
        run: |
          cd build
          # Create extension package
          mkdir -p extension-binaries
          cp -r repository/* extension-binaries/

      - name: Upload Extension Binaries
        uses: actions/upload-artifact@v4
        with:
          name: extension-binaries
          path: build/extension-binaries

  # Test the extension (reuses build artifacts)
  test-extension:
    name: Test Extension
    runs-on: ubuntu-latest
    needs: [quick-build-check]
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake
          restore-keys: |
            vcpkg-ubuntu-

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Complete Build for Testing
        run: |
          cd build
          # Complete the build with test targets
          cmake --build . --target unittest --parallel 2

      - name: Run Extension Tests
        run: |
          cd build
          # Run comprehensive extension tests
          ./test/unittest "test/sql/snowflake*"
          ./test/unittest "test/sql/test_attach*"
          ./test/unittest "test/sql/test_list*"
          ./test/unittest "test/sql/decimal_to_int*"

      - name: Run Additional Tests
        run: |
          cd build
          # Run any additional tests that might be available
          ./test/unittest "test/sql/test_*" | grep -E "(snowflake|attach|client)" || true

  # Upload extension to DuckDB extension repository
  upload-extension:
    name: Upload Extension
    runs-on: ubuntu-latest
    needs: [duckdb-stable-build, test-extension]
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download Extension Binaries
        uses: actions/download-artifact@v4
        with:
          name: extension-binaries
          path: extension-binaries

      - name: Upload to Extension Repository
        run: |
          # This step would upload the extension to the DuckDB extension repository
          # For now, we'll just verify the extension was built successfully
          ls -la extension-binaries/
          echo "Extension built successfully and ready for upload"
