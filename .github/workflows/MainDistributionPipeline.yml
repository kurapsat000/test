#
# This workflow calls the main distribution pipeline from DuckDB to build, test and (optionally) release the extension
#
name: Main Distribution Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  extension_name: snowflake
  extra_toolchains: 'parser_tools'

jobs:
  # Ultra-fast build check - only build the extension, not full DuckDB
  quick-build-check:
    name: Quick Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          # Shallow clone for faster checkout
          fetch-depth: 1

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-ubuntu-snowflake-
            vcpkg-ubuntu-

      - name: Cache CMake
        uses: actions/cache@v4
        with:
          path: build/
          key: cmake-cache-ubuntu-${{ hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp') }}
          restore-keys: |
            cmake-cache-ubuntu-

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-ubuntu-${{ hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp') }}
          restore-keys: |
            ccache-ubuntu-

      - name: Build Extension Only (Ultra-Fast)
        run: |
          mkdir -p build
          cd build
          # Use aggressive parallel builds, ccache, and only build the extension
          cmake -DCMAKE_BUILD_TYPE=Release -DEXTENSION_STATIC_BUILD=1 -DDUCKDB_EXTENSION_CONFIGS=$GITHUB_WORKSPACE/extension_config.cmake -S ../duckdb/ -DCMAKE_CXX_FLAGS="-O3 -march=native" -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          # Build only the extension with maximum parallelism
          cmake --build . --target snowflake_extension --parallel $(nproc)

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          # Compress artifacts for faster upload/download
          compression-level: 9

  # Parallel test execution
  test-extension:
    name: Test Extension
    runs-on: ubuntu-latest
    needs: [quick-build-check]
    timeout-minutes: 15
    strategy:
      matrix:
        test-group: [snowflake-core, snowflake-storage, snowflake-client]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-ubuntu-snowflake-
            vcpkg-ubuntu-

      - name: Cache CMake
        uses: actions/cache@v4
        with:
          path: build/
          key: cmake-cache-ubuntu-${{ hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp') }}
          restore-keys: |
            cmake-cache-ubuntu-

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-ubuntu-${{ hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp') }}
          restore-keys: |
            ccache-ubuntu-

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Complete Build for Testing
        run: |
          cd build
          # Complete the build with test targets, using aggressive optimization and ccache
          cmake --build . --target unittest --parallel $(nproc)

      - name: Run Parallel Tests
        run: |
          cd build
          # Run tests based on matrix strategy for parallel execution
          case ${{ matrix.test-group }} in
            "snowflake-core")
              ./test/unittest "test/sql/snowflake.test"
              ./test/unittest "test/sql/snowflake_integration.test"
              ;;
            "snowflake-storage")
              ./test/unittest "test/sql/snowflake_attach_storage.test"
              ./test/unittest "test/sql/test_attach_with_schemas.test"
              ;;
            "snowflake-client")
              ./test/unittest "test/sql/snowflake_client_manager.test"
              ./test/unittest "test/sql/snowflake_client_advanced.test"
              ;;
          esac

  # Fast binary build (reuses artifacts)
  duckdb-stable-build:
    name: Build extension binaries
    runs-on: ubuntu-latest
    needs: [quick-build-check]
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28'

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '53bef8994c541b6561884a8395ea35715ece75db'

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-ubuntu-snowflake-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-ubuntu-snowflake-
            vcpkg-ubuntu-

      - name: Cache CMake
        uses: actions/cache@v4
        with:
          path: build/
          key: cmake-cache-ubuntu-${{ hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp') }}
          restore-keys: |
            cmake-cache-ubuntu-

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-ubuntu-${{ hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp') }}
          restore-keys: |
            ccache-ubuntu-

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Complete Build
        run: |
          cd build
          # Complete the build with all targets, using maximum parallelism and ccache
          cmake --build . --parallel $(nproc)

      - name: Package Extension
        run: |
          cd build
          # Create extension package
          mkdir -p extension-binaries
          cp -r repository/* extension-binaries/

      - name: Upload Extension Binaries
        uses: actions/upload-artifact@v4
        with:
          name: extension-binaries
          path: build/extension-binaries
          compression-level: 9

  # Upload extension to DuckDB extension repository
  upload-extension:
    name: Upload Extension
    runs-on: ubuntu-latest
    needs: [duckdb-stable-build, test-extension]
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Download Extension Binaries
        uses: actions/download-artifact@v4
        with:
          name: extension-binaries
          path: extension-binaries

      - name: Upload to Extension Repository
        run: |
          # This step would upload the extension to the DuckDB extension repository
          # For now, we'll just verify the extension was built successfully
          ls -la extension-binaries/
          echo "Extension built successfully and ready for upload"
