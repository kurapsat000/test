#
# This workflow calls the main distribution pipeline from DuckDB to build, test and (optionally) release the extension
#
name: Main Extension Distribution Pipeline
on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' && github.sha || '' }}
  cancel-in-progress: true

jobs:
  duckdb-next-build:
    name: Build extension binaries
    uses: duckdb/extension-ci-tools/.github/workflows/_extension_distribution.yml@main
    with:
      duckdb_version: main
      ci_tools_version: main
      extension_name: snowflake
      extra_toolchains: 'go'
      # Exclude problematic WASM builds for now until upstream fixes are available
      exclude_archs: 'wasm_mvp;wasm_eh;wasm_threads'

  duckdb-stable-build:
    name: Build extension binaries
    uses: duckdb/extension-ci-tools/.github/workflows/_extension_distribution.yml@main
    with:
      duckdb_version: b354bfeff4 # Specific commit with new API
      ci_tools_version: main
      extension_name: snowflake
      extra_toolchains: 'go'
      # Exclude problematic WASM builds for now until upstream fixes are available
      exclude_archs: 'wasm_mvp;wasm_eh;wasm_threads'

  code-quality-check:
    name: Code Quality Check
    uses: duckdb/extension-ci-tools/.github/workflows/_extension_code_quality.yml@main
    with:
      duckdb_version: b354bfeff4 # Specific commit with new API
      ci_tools_version: main
      extension_name: snowflake
      format_checks: 'format;tidy'

  # Robust fallback build job
  robust-fallback-build:
    name: Robust Fallback Build
    runs-on: ubuntu-latest
    if: failure() # Only run if previous jobs fail
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Run Robust Build Script
        run: |
          ./scripts/robust_build.sh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: robust-build-artifacts
          path: build/

  # Custom comprehensive build job with all dependencies
  custom-build-comprehensive:
    name: Custom Comprehensive Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install all required dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            ninja-build \
            flex \
            bison \
            libssl-dev \
            zlib1g-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            libffi-dev \
            liblzma-dev \
            libgdbm-dev \
            libnss3-dev \
            libncursesw5-dev \
            libc6-dev \
            libgcc-s1 \
            gcc \
            g++ \
            make \
            pkg-config
      
      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          echo "$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_PATH
      
      - name: Build extension with proper configuration
        env:
          VCPKG_TOOLCHAIN_PATH: "$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake"
          GEN: "ninja"
          CC: "gcc"
          CXX: "g++"
          CMAKE_MAKE_PROGRAM: "ninja"
        run: |
          # Ensure ninja is available
          which ninja
          ninja --version
          
          # Verify toolchain path
          echo "VCPKG_TOOLCHAIN_PATH: $VCPKG_TOOLCHAIN_PATH"
          ls -la "$VCPKG_TOOLCHAIN_PATH"
          
          # Build the extension
          make ci-build
      
      - name: Test extension
        run: |
          make ci-test

  # Custom WASM build job with proper toolchain setup
  wasm-build:
    name: Build WASM Extension
    runs-on: ubuntu-latest
    strategy:
      matrix:
        wasm_platform: [wasm_mvp, wasm_eh, wasm_threads]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v13
        with:
          version: 3.1.71
      
      - name: Install build tools and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            make \
            flex \
            bison \
            build-essential \
            cmake \
            git \
            libssl-dev \
            zlib1g-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            libffi-dev \
            liblzma-dev \
            libgdbm-dev \
            libnss3-dev \
            libncursesw5-dev \
            libc6-dev \
            libgcc-s1 \
            gcc \
            g++ \
            pkg-config
      
      - name: Setup vcpkg
        run: |
          mkdir local_vcpkg_installation
          cd local_vcpkg_installation
          git init
          git remote add origin https://github.com/Microsoft/vcpkg
          git fetch origin main
          git checkout main
          ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV
          echo "VCPKG_TOOLCHAIN_PATH=$PWD/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "$PWD" >> $GITHUB_PATH
      
      - name: Build WASM extension
        env:
          VCPKG_TARGET_TRIPLET: wasm32-emscripten
          VCPKG_HOST_TRIPLET: x64-linux
          VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/local_vcpkg_installation/scripts/buildsystems/vcpkg.cmake
          DUCKDB_PLATFORM: ${{ matrix.wasm_platform }}
          # Ensure proper CMake generator is set for WASM builds
          CMAKE_GENERATOR: "Unix Makefiles"
          # Set the make program explicitly for WASM builds
          CMAKE_MAKE_PROGRAM: "make"
        run: |
          # Ensure emscripten environment is properly set up
          source $EMSDK/emsdk_env.sh
          
          # Verify toolchain path
          echo "VCPKG_TOOLCHAIN_PATH: $VCPKG_TOOLCHAIN_PATH"
          ls -la "$VCPKG_TOOLCHAIN_PATH"
          
          # Build with explicit generator and make program
          emcmake cmake \
            -DDUCKDB_EXTENSION_CONFIGS=${{ github.workspace }}/extension_config.cmake \
            -DVCPKG_MANIFEST_DIR=${{ github.workspace }}/ \
            -DWASM_LOADABLE_EXTENSIONS=1 \
            -DBUILD_EXTENSIONS_ONLY=1 \
            -DVCPKG_BUILD=1 \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/local_vcpkg_installation/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=wasm32-emscripten \
            -DVCPKG_HOST_TRIPLET=x64-linux \
            -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DEXTENSION_STATIC_BUILD=1 \
            -DDUCKDB_EXPLICIT_PLATFORM=${{ matrix.wasm_platform }} \
            -DDUCKDB_CUSTOM_PLATFORM=${{ matrix.wasm_platform }} \
            -G "Unix Makefiles" \
            -DCMAKE_MAKE_PROGRAM=make \
            -Bbuild/${{ matrix.wasm_platform }} \
            -S ./duckdb/
          
          emmake make -j$(nproc) -C build/${{ matrix.wasm_platform }}
      
      - name: Upload WASM artifact
        uses: actions/upload-artifact@v4
        with:
          name: snowflake-${{ matrix.wasm_platform }}-extension
          path: build/${{ matrix.wasm_platform }}/extension/snowflake/snowflake.duckdb_extension.wasm

  # Custom format check job with proper Python setup
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      
      - name: Install Python dependencies
        run: |
          pip install "black>=24"
      
      - name: Check formatting
        run: |
          python3 duckdb/scripts/format.py --all --check --directories src test
