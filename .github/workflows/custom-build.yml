name: Custom Extension Build
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            ninja-build \
            flex \
            bison \
            libssl-dev \
            zlib1g-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            libffi-dev \
            liblzma-dev \
            libgdbm-dev \
            libnss3-dev \
            libncursesw5-dev \
            libtinfo5 \
            libc6-dev \
            libgcc-s1 \
            gcc \
            g++ \
            make \
            pkg-config
      
      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          echo "$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_PATH
      
      - name: Build extension
        env:
          VCPKG_TOOLCHAIN_PATH: "$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake"
          GEN: "ninja"
          CC: "gcc"
          CXX: "g++"
          CMAKE_MAKE_PROGRAM: "ninja"
        run: |
          # Ensure ninja is available
          which ninja
          ninja --version
          
          # Build the extension
          make ci-build
      
      - name: Test extension
        run: |
          make ci-test

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          brew install cmake ninja flex bison openssl zlib bzip2 readline sqlite3 wget curl libffi xz gdbm nss ncurses pkg-config
      
      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          echo "$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_PATH
      
      - name: Build extension
        env:
          VCPKG_TOOLCHAIN_PATH: "$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake"
          GEN: "ninja"
          CC: "clang"
          CXX: "clang++"
          CMAKE_MAKE_PROGRAM: "ninja"
        run: |
          # Ensure ninja is available
          which ninja
          ninja --version
          
          # Build the extension
          make ci-build
      
      - name: Test extension
        run: |
          make ci-test

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install dependencies
        run: |
          choco install cmake ninja winflexbison3 openssl zlib bzip2 readline sqlite3 wget curl libffi xz gdbm nss ncurses pkg-config
      
      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.bat
          echo "$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $env:GITHUB_PATH
      
      - name: Build extension
        env:
          VCPKG_TOOLCHAIN_PATH: "$PWD/vcpkg/scripts/buildsystems/vcpkg.cmake"
          GEN: "ninja"
          CC: "cl"
          CXX: "cl"
          CMAKE_MAKE_PROGRAM: "ninja"
        run: |
          # Ensure ninja is available
          ninja --version
          
          # Build the extension
          make ci-build
      
      - name: Test extension
        run: |
          ./build/release/duckdb.exe -c "LOAD 'build/release/extension/snowflake/snowflake.duckdb_extension'; SELECT snowflake_version();"

  build-wasm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        wasm_platform: [wasm_mvp, wasm_eh, wasm_threads]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v13
        with:
          version: 3.1.71
      
      - name: Install build tools and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build \
            make \
            flex \
            bison \
            build-essential \
            cmake \
            git \
            libssl-dev \
            zlib1g-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            wget \
            curl \
            libffi-dev \
            liblzma-dev \
            libgdbm-dev \
            libnss3-dev \
            libncursesw5-dev \
            libtinfo5 \
            libc6-dev \
            libgcc-s1 \
            gcc \
            g++ \
            pkg-config
      
      - name: Setup vcpkg
        run: |
          mkdir local_vcpkg_installation
          cd local_vcpkg_installation
          git init
          git remote add origin https://github.com/Microsoft/vcpkg
          git fetch origin main
          git checkout main
          ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$PWD" >> $GITHUB_ENV
          echo "VCPKG_TOOLCHAIN_PATH=$PWD/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "$PWD" >> $GITHUB_PATH
      
      - name: Build WASM extension
        env:
          VCPKG_TARGET_TRIPLET: wasm32-emscripten
          VCPKG_HOST_TRIPLET: x64-linux
          VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/local_vcpkg_installation/scripts/buildsystems/vcpkg.cmake
          DUCKDB_PLATFORM: ${{ matrix.wasm_platform }}
          # Use Unix Makefiles for WASM builds to avoid generator issues
          GEN: "Unix Makefiles"
        run: |
          # Ensure emscripten environment is properly set up
          source $EMSDK/emsdk_env.sh
          # Build with explicit generator and make program
          emcmake cmake \
            -DDUCKDB_EXTENSION_CONFIGS=${{ github.workspace }}/extension_config.cmake \
            -DVCPKG_MANIFEST_DIR=${{ github.workspace }}/ \
            -DWASM_LOADABLE_EXTENSIONS=1 \
            -DBUILD_EXTENSIONS_ONLY=1 \
            -DVCPKG_BUILD=1 \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/local_vcpkg_installation/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=wasm32-emscripten \
            -DVCPKG_HOST_TRIPLET=x64-linux \
            -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DEXTENSION_STATIC_BUILD=1 \
            -DDUCKDB_EXPLICIT_PLATFORM=${{ matrix.wasm_platform }} \
            -DDUCKDB_CUSTOM_PLATFORM=${{ matrix.wasm_platform }} \
            -G "Unix Makefiles" \
            -DCMAKE_MAKE_PROGRAM=make \
            -Bbuild/${{ matrix.wasm_platform }} \
            -S ./duckdb/
          
          emmake make -j$(nproc) -C build/${{ matrix.wasm_platform }}
      
      - name: Upload WASM artifact
        uses: actions/upload-artifact@v4
        with:
          name: snowflake-${{ matrix.wasm_platform }}-extension
          path: build/${{ matrix.wasm_platform }}/extension/snowflake/snowflake.duckdb_extension.wasm

  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Check formatting
        run: |
          python3 duckdb/scripts/format.py --all --check --directories src test 